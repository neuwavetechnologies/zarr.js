{"version":3,"file":"index.min3.mjs","sources":["../node_modules/@aws-sdk/credential-provider-process/dist-es/getValidatedProcessCredentials.js","../node_modules/@aws-sdk/credential-provider-process/dist-es/resolveProcessCredentials.js","../node_modules/@aws-sdk/credential-provider-process/dist-es/fromProcess.js"],"sourcesContent":["import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const getValidatedProcessCredentials = (profileName, data, profiles) => {\n    if (data.Version !== 1) {\n        throw Error(`Profile ${profileName} credential_process did not return Version 1.`);\n    }\n    if (data.AccessKeyId === undefined || data.SecretAccessKey === undefined) {\n        throw Error(`Profile ${profileName} credential_process returned invalid credentials.`);\n    }\n    if (data.Expiration) {\n        const currentTime = new Date();\n        const expireTime = new Date(data.Expiration);\n        if (expireTime < currentTime) {\n            throw Error(`Profile ${profileName} credential_process returned expired credentials.`);\n        }\n    }\n    let accountId = data.AccountId;\n    if (!accountId && profiles?.[profileName]?.aws_account_id) {\n        accountId = profiles[profileName].aws_account_id;\n    }\n    const credentials = {\n        accessKeyId: data.AccessKeyId,\n        secretAccessKey: data.SecretAccessKey,\n        ...(data.SessionToken && { sessionToken: data.SessionToken }),\n        ...(data.Expiration && { expiration: new Date(data.Expiration) }),\n        ...(data.CredentialScope && { credentialScope: data.CredentialScope }),\n        ...(accountId && { accountId }),\n    };\n    setCredentialFeature(credentials, \"CREDENTIALS_PROCESS\", \"w\");\n    return credentials;\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { exec } from \"child_process\";\nimport { promisify } from \"util\";\nimport { getValidatedProcessCredentials } from \"./getValidatedProcessCredentials\";\nexport const resolveProcessCredentials = async (profileName, profiles, logger) => {\n    const profile = profiles[profileName];\n    if (profiles[profileName]) {\n        const credentialProcess = profile[\"credential_process\"];\n        if (credentialProcess !== undefined) {\n            const execPromise = promisify(exec);\n            try {\n                const { stdout } = await execPromise(credentialProcess);\n                let data;\n                try {\n                    data = JSON.parse(stdout.trim());\n                }\n                catch {\n                    throw Error(`Profile ${profileName} credential_process returned invalid JSON.`);\n                }\n                return getValidatedProcessCredentials(profileName, data, profiles);\n            }\n            catch (error) {\n                throw new CredentialsProviderError(error.message, { logger });\n            }\n        }\n        else {\n            throw new CredentialsProviderError(`Profile ${profileName} did not contain credential_process.`, { logger });\n        }\n    }\n    else {\n        throw new CredentialsProviderError(`Profile ${profileName} could not be found in shared credentials file.`, {\n            logger,\n        });\n    }\n};\n","import { getProfileName, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { resolveProcessCredentials } from \"./resolveProcessCredentials\";\nexport const fromProcess = (init = {}) => async ({ callerClientConfig } = {}) => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-process - fromProcess\");\n    const profiles = await parseKnownFiles(init);\n    return resolveProcessCredentials(getProfileName({\n        profile: init.profile ?? callerClientConfig?.profile,\n    }), profiles, init.logger);\n};\n"],"names":["resolveProcessCredentials","async","profileName","profiles","logger","profile","CredentialsProviderError","credentialProcess","undefined","execPromise","promisify","exec","stdout","data","JSON","parse","trim","Error","Version","AccessKeyId","SecretAccessKey","Expiration","currentTime","Date","accountId","AccountId","aws_account_id","credentials","accessKeyId","secretAccessKey","SessionToken","sessionToken","expiration","CredentialScope","credentialScope","setCredentialFeature","getValidatedProcessCredentials","error","message","fromProcess","init","callerClientConfig","debug","parseKnownFiles","getProfileName"],"mappings":"yVACO,MCGMA,EAA4BC,MAAOC,EAAaC,EAAUC,KACnE,MAAMC,EAAUF,EAASD,GACzB,IAAIC,EAASD,GAwBT,MAAM,IAAII,EAAyB,WAAWJ,mDAA8D,CACxGE,WAzBmB,CACvB,MAAMG,EAAoBF,EAA4B,mBACtD,QAA0BG,IAAtBD,EAkBA,MAAM,IAAID,EAAyB,WAAWJ,wCAAmD,CAAEE,WAlBlE,CACjC,MAAMK,EAAcC,EAAUC,GAC9B,IACI,MAAMC,OAAEA,SAAiBH,EAAYF,GACrC,IAAIM,EACJ,IACIA,EAAOC,KAAKC,MAAMH,EAAOI,OAC5B,CACD,MACI,MAAMC,MAAM,WAAWf,8CAC1B,CACD,MDlB8B,EAACA,EAAaW,EAAMV,KAC9D,GAAqB,IAAjBU,EAAKK,QACL,MAAMD,MAAM,WAAWf,kDAE3B,QAAyBM,IAArBK,EAAKM,kBAAsDX,IAAzBK,EAAKO,gBACvC,MAAMH,MAAM,WAAWf,sDAE3B,GAAIW,EAAKQ,WAAY,CACjB,MAAMC,EAAc,IAAIC,KAExB,GADmB,IAAIA,KAAKV,EAAKQ,YAChBC,EACb,MAAML,MAAM,WAAWf,qDAE9B,CACD,IAAIsB,EAAYX,EAAKY,WAChBD,GAAarB,IAAWD,IAAcwB,iBACvCF,EAAYrB,EAASD,GAAawB,gBAEtC,MAAMC,EAAc,CAChBC,YAAaf,EAAKM,YAClBU,gBAAiBhB,EAAKO,mBAClBP,EAAKiB,cAAgB,CAAEC,aAAclB,EAAKiB,iBAC1CjB,EAAKQ,YAAc,CAAEW,WAAY,IAAIT,KAAKV,EAAKQ,gBAC/CR,EAAKoB,iBAAmB,CAAEC,gBAAiBrB,EAAKoB,oBAChDT,GAAa,CAAEA,cAGvB,OADAW,EAAqBR,EAAa,sBAAuB,KAClDA,CAAW,ECTCS,CAA+BlC,EAAaW,EAAMV,EAC5D,CACD,MAAOkC,GACH,MAAM,IAAI/B,EAAyB+B,EAAMC,QAAS,CAAElC,UACvD,CACJ,CAIJ,CAKA,EC/BQmC,EAAc,CAACC,EAAO,CAAA,IAAOvC,OAASwC,sBAAuB,MACtED,EAAKpC,QAAQsC,MAAM,sDACnB,MAAMvC,QAAiBwC,EAAgBH,GACvC,OAAOxC,EAA0B4C,EAAe,CAC5CvC,QAASmC,EAAKnC,SAAWoC,GAAoBpC,UAC7CF,EAAUqC,EAAKpC,OAAO"}