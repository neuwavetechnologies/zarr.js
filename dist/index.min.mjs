import{TokenProviderError as e,getSSOTokenFilepath as o,parseKnownFiles as s,getProfileName as t,loadSsoSessionData as n,getSSOTokenFromFile as i,CredentialsProviderError as r,setCredentialFeature as a}from"./core.min.mjs";import"os";import"path";import"crypto";import{promises as c}from"fs";import"buffer";import"http2";import"stream";import"http";import"https";import"zlib";import"process";const l=e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name),g="To refresh this SSO session run 'aws sso login' with the corresponding profile.",f=async(e,o,s={})=>{const{CreateTokenCommand:t}=await import("./index.min7.mjs"),n=await(async(e,o={})=>{const{SSOOIDCClient:s}=await import("./index.min7.mjs");return new s(Object.assign({},o.clientConfig??{},{region:e??o.clientConfig?.region,logger:o.clientConfig?.logger??o.parentClientConfig?.logger}))})(o,s);return n.send(new t({clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:e.refreshToken,grantType:"refresh_token"}))},p=o=>{if(o.expiration&&o.expiration.getTime()<Date.now())throw new e(`Token is expired. ${g}`,!1)},w=(o,s,t=!1)=>{if(void 0===s)throw new e(`Value not present for '${o}' in SSO Token${t?". Cannot refresh":""}. ${g}`,!1)},{writeFile:d}=c,h=new Date(0),u=(r={})=>async({callerClientConfig:a}={})=>{const c={...r,parentClientConfig:{...a,...r.parentClientConfig}};c.logger?.debug("@aws-sdk/token-providers - fromSso");const l=await s(c),u=t({profile:c.profile??a?.profile}),S=l[u];if(!S)throw new e(`Profile '${u}' could not be found in shared credentials file.`,!1);if(!S.sso_session)throw new e(`Profile '${u}' is missing required property 'sso_session'.`);const m=S.sso_session,_=(await n(c))[m];if(!_)throw new e(`Sso session '${m}' could not be found in shared credentials file.`,!1);for(const o of["sso_start_url","sso_region"])if(!_[o])throw new e(`Sso session '${m}' is missing required property '${o}'.`,!1);_.sso_start_url;const C=_.sso_region;let k;try{k=await i(m)}catch(o){throw new e(`The SSO session token associated with profile=${u} was not found or is invalid. ${g}`,!1)}w("accessToken",k.accessToken),w("expiresAt",k.expiresAt);const{accessToken:y,expiresAt:T}=k,x={token:y,expiration:new Date(T)};if(x.expiration.getTime()-Date.now()>3e5)return x;if(Date.now()-h.getTime()<3e4)return p(x),x;w("clientId",k.clientId,!0),w("clientSecret",k.clientSecret,!0),w("refreshToken",k.refreshToken,!0);try{h.setTime(Date.now());const e=await f(k,C,c);w("accessToken",e.accessToken),w("expiresIn",e.expiresIn);const s=new Date(Date.now()+1e3*e.expiresIn);try{await((e,s)=>{const t=o(e),n=JSON.stringify(s,null,2);return d(t,n)})(m,{...k,accessToken:e.accessToken,expiresAt:s.toISOString(),refreshToken:e.refreshToken})}catch(e){}return{token:e.accessToken,expiration:s}}catch(e){return p(x),x}},S=!1,m=async({ssoStartUrl:e,ssoSession:o,ssoAccountId:s,ssoRegion:t,ssoRoleName:n,ssoClient:c,clientConfig:l,parentClientConfig:g,profile:f,logger:p})=>{let w;const d="To refresh this SSO session run aws sso login with the corresponding profile.";if(o)try{const e=await u({profile:f})();w={accessToken:e.token,expiresAt:new Date(e.expiration).toISOString()}}catch(e){throw new r(e.message,{tryNextLink:S,logger:p})}else try{w=await i(e)}catch(e){throw new r(`The SSO session associated with this profile is invalid. ${d}`,{tryNextLink:S,logger:p})}if(new Date(w.expiresAt).getTime()-Date.now()<=0)throw new r(`The SSO session associated with this profile has expired. ${d}`,{tryNextLink:S,logger:p});const{accessToken:h}=w,{SSOClient:m,GetRoleCredentialsCommand:_}=await import("./loadSso.min.mjs"),C=c||new m(Object.assign({},l??{},{logger:l?.logger??g?.logger,region:l?.region??t}));let k;try{k=await C.send(new _({accountId:s,roleName:n,accessToken:h}))}catch(e){throw new r(e,{tryNextLink:S,logger:p})}const{roleCredentials:{accessKeyId:y,secretAccessKey:T,sessionToken:x,expiration:O,credentialScope:I,accountId:N}={}}=k;if(!(y&&T&&x&&O))throw new r("SSO returns an invalid temporary credential.",{tryNextLink:S,logger:p});const $={accessKeyId:y,secretAccessKey:T,sessionToken:x,expiration:new Date(O),...I&&{credentialScope:I},...N&&{accountId:N}};return o?a($,"CREDENTIALS_SSO","s"):a($,"CREDENTIALS_SSO_LEGACY","u"),$},_=(e,o)=>{const{sso_start_url:s,sso_account_id:t,sso_region:n,sso_role_name:i}=e;if(!(s&&t&&n&&i))throw new r(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(e).join(", ")}\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,{tryNextLink:!1,logger:o});return e},C=(e={})=>async({callerClientConfig:o}={})=>{e.logger?.debug("@aws-sdk/credential-provider-sso - fromSSO");const{ssoStartUrl:i,ssoAccountId:a,ssoRegion:c,ssoRoleName:g,ssoSession:f}=e,{ssoClient:p}=e,w=t({profile:e.profile??o?.profile});if(i||a||c||g||f){if(i&&a&&c&&g)return m({ssoStartUrl:i,ssoSession:f,ssoAccountId:a,ssoRegion:c,ssoRoleName:g,ssoClient:p,clientConfig:e.clientConfig,parentClientConfig:e.parentClientConfig,profile:w});throw new r('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"',{tryNextLink:!1,logger:e.logger})}{const o=(await s(e))[w];if(!o)throw new r(`Profile ${w} was not found.`,{logger:e.logger});if(!l(o))throw new r(`Profile ${w} is not configured with SSO credentials.`,{logger:e.logger});if(o?.sso_session){const s=(await n(e))[o.sso_session],t=` configurations in profile ${w} and sso-session ${o.sso_session}`;if(c&&c!==s.sso_region)throw new r("Conflicting SSO region"+t,{tryNextLink:!1,logger:e.logger});if(i&&i!==s.sso_start_url)throw new r("Conflicting SSO start_url"+t,{tryNextLink:!1,logger:e.logger});o.sso_region=s.sso_region,o.sso_start_url=s.sso_start_url}const{sso_start_url:t,sso_account_id:a,sso_region:g,sso_role_name:f,sso_session:d}=_(o,e.logger);return m({ssoStartUrl:t,ssoSession:d,ssoAccountId:a,ssoRegion:g,ssoRoleName:f,ssoClient:p,clientConfig:e.clientConfig,parentClientConfig:e.parentClientConfig,profile:w})}};export{C as fromSSO,l as isSsoProfile,_ as validateSsoProfile};
//# sourceMappingURL=index.min.mjs.map
