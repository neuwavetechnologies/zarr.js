{"version":3,"file":"index.min2.mjs","sources":["../node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveCredentialSource.js","../node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveAssumeRoleCredentials.js","../node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveStaticCredentials.js","../node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js","../node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveWebIdentityCredentials.js","../node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProcessCredentials.js","../node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveSsoCredentials.js","../node_modules/@aws-sdk/credential-provider-ini/dist-es/fromIni.js"],"sourcesContent":["import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { chain, CredentialsProviderError } from \"@smithy/property-provider\";\nexport const resolveCredentialSource = (credentialSource, profileName, logger) => {\n    const sourceProvidersMap = {\n        EcsContainer: async (options) => {\n            const { fromHttp } = await import(\"@aws-sdk/credential-provider-http\");\n            const { fromContainerMetadata } = await import(\"@smithy/credential-provider-imds\");\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is EcsContainer\");\n            return async () => chain(fromHttp(options ?? {}), fromContainerMetadata(options))().then(setNamedProvider);\n        },\n        Ec2InstanceMetadata: async (options) => {\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata\");\n            const { fromInstanceMetadata } = await import(\"@smithy/credential-provider-imds\");\n            return async () => fromInstanceMetadata(options)().then(setNamedProvider);\n        },\n        Environment: async (options) => {\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is Environment\");\n            const { fromEnv } = await import(\"@aws-sdk/credential-provider-env\");\n            return async () => fromEnv(options)().then(setNamedProvider);\n        },\n    };\n    if (credentialSource in sourceProvidersMap) {\n        return sourceProvidersMap[credentialSource];\n    }\n    else {\n        throw new CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, ` +\n            `expected EcsContainer or Ec2InstanceMetadata or Environment.`, { logger });\n    }\n};\nconst setNamedProvider = (creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_NAMED_PROVIDER\", \"p\");\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getProfileName } from \"@smithy/shared-ini-file-loader\";\nimport { resolveCredentialSource } from \"./resolveCredentialSource\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const isAssumeRoleProfile = (arg, { profile = \"default\", logger } = {}) => {\n    return (Boolean(arg) &&\n        typeof arg === \"object\" &&\n        typeof arg.role_arn === \"string\" &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1 &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.external_id) > -1 &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.mfa_serial) > -1 &&\n        (isAssumeRoleWithSourceProfile(arg, { profile, logger }) || isCredentialSourceProfile(arg, { profile, logger })));\n};\nconst isAssumeRoleWithSourceProfile = (arg, { profile, logger }) => {\n    const withSourceProfile = typeof arg.source_profile === \"string\" && typeof arg.credential_source === \"undefined\";\n    if (withSourceProfile) {\n        logger?.debug?.(`    ${profile} isAssumeRoleWithSourceProfile source_profile=${arg.source_profile}`);\n    }\n    return withSourceProfile;\n};\nconst isCredentialSourceProfile = (arg, { profile, logger }) => {\n    const withProviderProfile = typeof arg.credential_source === \"string\" && typeof arg.source_profile === \"undefined\";\n    if (withProviderProfile) {\n        logger?.debug?.(`    ${profile} isCredentialSourceProfile credential_source=${arg.credential_source}`);\n    }\n    return withProviderProfile;\n};\nexport const resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {\n    options.logger?.debug(\"@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)\");\n    const profileData = profiles[profileName];\n    const { source_profile, region } = profileData;\n    if (!options.roleAssumer) {\n        const { getDefaultRoleAssumer } = await import(\"@aws-sdk/nested-clients/sts\");\n        options.roleAssumer = getDefaultRoleAssumer({\n            ...options.clientConfig,\n            credentialProviderLogger: options.logger,\n            parentClientConfig: {\n                ...options?.parentClientConfig,\n                region: region ?? options?.parentClientConfig?.region,\n            },\n        }, options.clientPlugins);\n    }\n    if (source_profile && source_profile in visitedProfiles) {\n        throw new CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile` +\n            ` ${getProfileName(options)}. Profiles visited: ` +\n            Object.keys(visitedProfiles).join(\", \"), { logger: options.logger });\n    }\n    options.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${source_profile ? `source_profile=[${source_profile}]` : `profile=[${profileName}]`}`);\n    const sourceCredsProvider = source_profile\n        ? resolveProfileData(source_profile, profiles, options, {\n            ...visitedProfiles,\n            [source_profile]: true,\n        }, isCredentialSourceWithoutRoleArn(profiles[source_profile] ?? {}))\n        : (await resolveCredentialSource(profileData.credential_source, profileName, options.logger)(options))();\n    if (isCredentialSourceWithoutRoleArn(profileData)) {\n        return sourceCredsProvider.then((creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_SOURCE_PROFILE\", \"o\"));\n    }\n    else {\n        const params = {\n            RoleArn: profileData.role_arn,\n            RoleSessionName: profileData.role_session_name || `aws-sdk-js-${Date.now()}`,\n            ExternalId: profileData.external_id,\n            DurationSeconds: parseInt(profileData.duration_seconds || \"3600\", 10),\n        };\n        const { mfa_serial } = profileData;\n        if (mfa_serial) {\n            if (!options.mfaCodeProvider) {\n                throw new CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, { logger: options.logger, tryNextLink: false });\n            }\n            params.SerialNumber = mfa_serial;\n            params.TokenCode = await options.mfaCodeProvider(mfa_serial);\n        }\n        const sourceCreds = await sourceCredsProvider;\n        return options.roleAssumer(sourceCreds, params).then((creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_SOURCE_PROFILE\", \"o\"));\n    }\n};\nconst isCredentialSourceWithoutRoleArn = (section) => {\n    return !section.role_arn && !!section.credential_source;\n};\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const isStaticCredsProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.aws_access_key_id === \"string\" &&\n    typeof arg.aws_secret_access_key === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.aws_session_token) > -1 &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.aws_account_id) > -1;\nexport const resolveStaticCredentials = async (profile, options) => {\n    options?.logger?.debug(\"@aws-sdk/credential-provider-ini - resolveStaticCredentials\");\n    const credentials = {\n        accessKeyId: profile.aws_access_key_id,\n        secretAccessKey: profile.aws_secret_access_key,\n        sessionToken: profile.aws_session_token,\n        ...(profile.aws_credential_scope && { credentialScope: profile.aws_credential_scope }),\n        ...(profile.aws_account_id && { accountId: profile.aws_account_id }),\n    };\n    return setCredentialFeature(credentials, \"CREDENTIALS_PROFILE\", \"n\");\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { isAssumeRoleProfile, resolveAssumeRoleCredentials } from \"./resolveAssumeRoleCredentials\";\nimport { isProcessProfile, resolveProcessCredentials } from \"./resolveProcessCredentials\";\nimport { isSsoProfile, resolveSsoCredentials } from \"./resolveSsoCredentials\";\nimport { isStaticCredsProfile, resolveStaticCredentials } from \"./resolveStaticCredentials\";\nimport { isWebIdentityProfile, resolveWebIdentityCredentials } from \"./resolveWebIdentityCredentials\";\nexport const resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}, isAssumeRoleRecursiveCall = false) => {\n    const data = profiles[profileName];\n    if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data, options);\n    }\n    if (isAssumeRoleRecursiveCall || isAssumeRoleProfile(data, { profile: profileName, logger: options.logger })) {\n        return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);\n    }\n    if (isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data, options);\n    }\n    if (isWebIdentityProfile(data)) {\n        return resolveWebIdentityCredentials(data, options);\n    }\n    if (isProcessProfile(data)) {\n        return resolveProcessCredentials(options, profileName);\n    }\n    if (isSsoProfile(data)) {\n        return await resolveSsoCredentials(profileName, data, options);\n    }\n    throw new CredentialsProviderError(`Could not resolve credentials using profile: [${profileName}] in configuration/credentials file(s).`, { logger: options.logger });\n};\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const isWebIdentityProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.web_identity_token_file === \"string\" &&\n    typeof arg.role_arn === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1;\nexport const resolveWebIdentityCredentials = async (profile, options) => import(\"@aws-sdk/credential-provider-web-identity\").then(({ fromTokenFile }) => fromTokenFile({\n    webIdentityTokenFile: profile.web_identity_token_file,\n    roleArn: profile.role_arn,\n    roleSessionName: profile.role_session_name,\n    roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,\n    logger: options.logger,\n    parentClientConfig: options.parentClientConfig,\n})().then((creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN\", \"q\")));\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const isProcessProfile = (arg) => Boolean(arg) && typeof arg === \"object\" && typeof arg.credential_process === \"string\";\nexport const resolveProcessCredentials = async (options, profile) => import(\"@aws-sdk/credential-provider-process\").then(({ fromProcess }) => fromProcess({\n    ...options,\n    profile,\n})().then((creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_PROCESS\", \"v\")));\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const resolveSsoCredentials = async (profile, profileData, options = {}) => {\n    const { fromSSO } = await import(\"@aws-sdk/credential-provider-sso\");\n    return fromSSO({\n        profile,\n        logger: options.logger,\n        parentClientConfig: options.parentClientConfig,\n        clientConfig: options.clientConfig,\n    })().then((creds) => {\n        if (profileData.sso_session) {\n            return setCredentialFeature(creds, \"CREDENTIALS_PROFILE_SSO\", \"r\");\n        }\n        else {\n            return setCredentialFeature(creds, \"CREDENTIALS_PROFILE_SSO_LEGACY\", \"t\");\n        }\n    });\n};\nexport const isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === \"string\" ||\n        typeof arg.sso_account_id === \"string\" ||\n        typeof arg.sso_session === \"string\" ||\n        typeof arg.sso_region === \"string\" ||\n        typeof arg.sso_role_name === \"string\");\n","import { getProfileName, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const fromIni = (_init = {}) => async ({ callerClientConfig } = {}) => {\n    const init = {\n        ..._init,\n        parentClientConfig: {\n            ...callerClientConfig,\n            ..._init.parentClientConfig,\n        },\n    };\n    init.logger?.debug(\"@aws-sdk/credential-provider-ini - fromIni\");\n    const profiles = await parseKnownFiles(init);\n    return resolveProfileData(getProfileName({\n        profile: _init.profile ?? callerClientConfig?.profile,\n    }), profiles, init);\n};\n"],"names":["setNamedProvider","creds","setCredentialFeature","isAssumeRoleWithSourceProfile","arg","profile","logger","withSourceProfile","source_profile","credential_source","debug","isCredentialSourceProfile","withProviderProfile","resolveAssumeRoleCredentials","async","profileName","profiles","options","visitedProfiles","profileData","region","roleAssumer","getDefaultRoleAssumer","import","clientConfig","credentialProviderLogger","parentClientConfig","clientPlugins","CredentialsProviderError","getProfileName","Object","keys","join","sourceCredsProvider","resolveProfileData","isCredentialSourceWithoutRoleArn","credentialSource","sourceProvidersMap","EcsContainer","fromHttp","fromContainerMetadata","chain","then","Ec2InstanceMetadata","fromInstanceMetadata","Environment","fromEnv","n","index","resolveCredentialSource","params","RoleArn","role_arn","RoleSessionName","role_session_name","Date","now","ExternalId","external_id","DurationSeconds","parseInt","duration_seconds","mfa_serial","mfaCodeProvider","tryNextLink","SerialNumber","TokenCode","sourceCreds","section","isStaticCredsProfile","Boolean","aws_access_key_id","aws_secret_access_key","indexOf","aws_session_token","aws_account_id","resolveStaticCredentials","credentials","accessKeyId","secretAccessKey","sessionToken","aws_credential_scope","credentialScope","accountId","isAssumeRoleRecursiveCall","data","length","isAssumeRoleProfile","web_identity_token_file","fromTokenFile","webIdentityTokenFile","roleArn","roleSessionName","roleAssumerWithWebIdentity","resolveWebIdentityCredentials","credential_process","isProcessProfile","fromProcess","resolveProcessCredentials","sso_start_url","sso_account_id","sso_session","sso_region","sso_role_name","isSsoProfile","fromSSO","resolveSsoCredentials","fromIni","_init","callerClientConfig","init","parseKnownFiles"],"mappings":"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"}