import{ProviderError as e,CredentialsProviderError as t,parseUrl as a,loadConfig as r}from"./core.min.mjs";import{parse as o}from"url";import{Buffer as n}from"buffer";import{request as i}from"http";import"http2";import"stream";import"https";import"zlib";import"fs";import"crypto";import"path";import"os";import"process";function s(t){return new Promise(((a,r)=>{const o=i({method:"GET",...t,hostname:t.hostname?.replace(/^\[(.+)\]$/,"$1")});o.on("error",(t=>{r(Object.assign(new e("Unable to connect to instance metadata service"),t)),o.destroy()})),o.on("timeout",(()=>{r(new e("TimeoutError from instance metadata service")),o.destroy()})),o.on("response",(t=>{const{statusCode:i=400}=t;(i<200||300<=i)&&(r(Object.assign(new e("Error response received from instance metadata service"),{statusCode:i})),o.destroy());const s=[];t.on("data",(e=>{s.push(e)})),t.on("end",(()=>{a(n.concat(s)),o.destroy()}))})),o.end()}))}const c=e=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.AccessKeyId&&"string"==typeof e.SecretAccessKey&&"string"==typeof e.Token&&"string"==typeof e.Expiration,l=e=>({accessKeyId:e.AccessKeyId,secretAccessKey:e.SecretAccessKey,sessionToken:e.Token,expiration:new Date(e.Expiration),...e.AccountId&&{accountId:e.AccountId}}),d=1e3,p=0,m=({maxRetries:e=0,timeout:t=1e3})=>({maxRetries:e,timeout:t}),u=(e,t)=>{let a=e();for(let r=0;r<t;r++)a=a.catch(e);return a},f="AWS_CONTAINER_CREDENTIALS_FULL_URI",h="AWS_CONTAINER_CREDENTIALS_RELATIVE_URI",g="AWS_CONTAINER_AUTHORIZATION_TOKEN",v=(e={})=>{const{timeout:a,maxRetries:r}=m(e);return()=>u((async()=>{const r=await I({logger:e.logger}),o=JSON.parse(await w(a,r));if(!c(o))throw new t("Invalid response received from instance metadata service.",{logger:e.logger});return l(o)}),r)},w=async(e,t)=>{process.env[g]&&(t.headers={...t.headers,Authorization:process.env[g]});return(await s({...t,timeout:e})).toString()},y={localhost:!0,"127.0.0.1":!0},A={"http:":!0,"https:":!0},I=async({logger:e})=>{if(process.env[h])return{hostname:"169.254.170.2",path:process.env[h]};if(process.env[f]){const a=o(process.env[f]);if(!a.hostname||!(a.hostname in y))throw new t(`${a.hostname} is not a valid container metadata service hostname`,{tryNextLink:!1,logger:e});if(!a.protocol||!(a.protocol in A))throw new t(`${a.protocol} is not a valid container metadata service protocol`,{tryNextLink:!1,logger:e});return{...a,port:a.port?parseInt(a.port,10):void 0}}throw new t(`The container metadata credential provider cannot be used unless the ${h} or ${f} environment variable is set`,{tryNextLink:!1,logger:e})};class E extends t{constructor(e,t=!0){super(e,t),this.tryNextLink=t,this.name="InstanceMetadataV1FallbackError",Object.setPrototypeOf(this,E.prototype)}}var _;!function(e){e.IPv4="http://169.254.169.254",e.IPv6="http://[fd00:ec2::254]"}(_||(_={}));const S={environmentVariableSelector:e=>e.AWS_EC2_METADATA_SERVICE_ENDPOINT,configFileSelector:e=>e.ec2_metadata_service_endpoint,default:void 0};var b;!function(e){e.IPv4="IPv4",e.IPv6="IPv6"}(b||(b={}));const T={environmentVariableSelector:e=>e.AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE,configFileSelector:e=>e.ec2_metadata_service_endpoint_mode,default:b.IPv4},x=async()=>a(await D()||await N()),D=async()=>r(S)(),N=async()=>{const e=await r(T)();switch(e){case b.IPv4:return _.IPv4;case b.IPv6:return _.IPv6;default:throw new Error(`Unsupported endpoint mode: ${e}. Select from ${Object.values(b)}`)}},k=(e,t)=>{const a=300+Math.floor(300*Math.random()),r=new Date(Date.now()+1e3*a);t.warn(`Attempting credential expiration extension due to a credential service availability issue. A refresh of these credentials will be attempted after ${new Date(r)}.\nFor more information, please visit: https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html`);const o=e.originalExpiration??e.expiration;return{...e,...o?{originalExpiration:o}:{},expiration:r}},C="/latest/meta-data/iam/security-credentials/",O="AWS_EC2_METADATA_V1_DISABLED",P="ec2_metadata_v1_disabled",R="x-aws-ec2-metadata-token",M=(e={})=>((e,t={})=>{const a=t?.logger||console;let r;return async()=>{let t;try{t=await e(),t.expiration&&t.expiration.getTime()<Date.now()&&(t=k(t,a))}catch(e){if(!r)throw e;a.warn("Credential renew failed: ",e),t=k(r,a)}return r=t,t}})($(e),{logger:e.logger}),$=(e={})=>{let a=!1;const{logger:o,profile:n}=e,{timeout:i,maxRetries:s}=m(e),c=async(o,i)=>{if(a||null==i.headers?.[R]){let a=!1,o=!1;const i=await r({environmentVariableSelector:a=>{const r=a[O];if(o=!!r&&"false"!==r,void 0===r)throw new t(`${O} not set in env, checking config file next.`,{logger:e.logger});return o},configFileSelector:e=>{const t=e[P];return a=!!t&&"false"!==t,a},default:!1},{profile:n})();if(e.ec2MetadataV1Disabled||i){const t=[];throw e.ec2MetadataV1Disabled&&t.push("credential provider initialization (runtime option ec2MetadataV1Disabled)"),a&&t.push(`config file profile (${P})`),o&&t.push(`process environment variable (${O})`),new E(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${t.join(", ")}].`)}}const s=(await u((async()=>{let e;try{e=await K(i)}catch(e){throw 401===e.statusCode&&(a=!1),e}return e}),o)).trim();return u((async()=>{let t;try{t=await L(s,i,e)}catch(e){throw 401===e.statusCode&&(a=!1),e}return t}),o)};return async()=>{const e=await x();if(a)return o?.debug("AWS SDK Instance Metadata","using v1 fallback (no token fetch)"),c(s,{...e,timeout:i});{let t;try{t=(await V({...e,timeout:i})).toString()}catch(t){if(400===t?.statusCode)throw Object.assign(t,{message:"EC2 Metadata token request returned error"});return("TimeoutError"===t.message||[403,404,405].includes(t.statusCode))&&(a=!0),o?.debug("AWS SDK Instance Metadata","using v1 fallback (initial)"),c(s,{...e,timeout:i})}return c(s,{...e,headers:{[R]:t},timeout:i})}}},V=async e=>s({...e,path:"/latest/api/token",method:"PUT",headers:{"x-aws-ec2-metadata-token-ttl-seconds":"21600"}}),K=async e=>(await s({...e,path:C})).toString(),L=async(e,a,r)=>{const o=JSON.parse((await s({...a,path:C+e})).toString());if(!c(o))throw new t("Invalid response received from instance metadata service.",{logger:r.logger});return l(o)};export{p as DEFAULT_MAX_RETRIES,d as DEFAULT_TIMEOUT,g as ENV_CMDS_AUTH_TOKEN,f as ENV_CMDS_FULL_URI,h as ENV_CMDS_RELATIVE_URI,_ as Endpoint,v as fromContainerMetadata,M as fromInstanceMetadata,x as getInstanceMetadataEndpoint,s as httpRequest,m as providerConfigFromInit};
//# sourceMappingURL=index.min5.mjs.map
