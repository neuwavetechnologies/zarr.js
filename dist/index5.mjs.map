{"version":3,"file":"index5.mjs","sources":["../node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/httpRequest.js","../node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/ImdsCredentials.js","../node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/RemoteProviderInit.js","../node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/retry.js","../node_modules/@smithy/credential-provider-imds/dist-es/fromContainerMetadata.js","../node_modules/@smithy/credential-provider-imds/dist-es/error/InstanceMetadataV1FallbackError.js","../node_modules/@smithy/credential-provider-imds/dist-es/config/Endpoint.js","../node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointConfigOptions.js","../node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointMode.js","../node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointModeConfigOptions.js","../node_modules/@smithy/credential-provider-imds/dist-es/utils/getInstanceMetadataEndpoint.js","../node_modules/@smithy/credential-provider-imds/dist-es/utils/getExtendedInstanceMetadataCredentials.js","../node_modules/@smithy/credential-provider-imds/dist-es/utils/staticStabilityProvider.js","../node_modules/@smithy/credential-provider-imds/dist-es/fromInstanceMetadata.js"],"sourcesContent":["import { ProviderError } from \"@smithy/property-provider\";\nimport { Buffer } from \"buffer\";\nimport { request } from \"http\";\nexport function httpRequest(options) {\n    return new Promise((resolve, reject) => {\n        const req = request({\n            method: \"GET\",\n            ...options,\n            hostname: options.hostname?.replace(/^\\[(.+)\\]$/, \"$1\"),\n        });\n        req.on(\"error\", (err) => {\n            reject(Object.assign(new ProviderError(\"Unable to connect to instance metadata service\"), err));\n            req.destroy();\n        });\n        req.on(\"timeout\", () => {\n            reject(new ProviderError(\"TimeoutError from instance metadata service\"));\n            req.destroy();\n        });\n        req.on(\"response\", (res) => {\n            const { statusCode = 400 } = res;\n            if (statusCode < 200 || 300 <= statusCode) {\n                reject(Object.assign(new ProviderError(\"Error response received from instance metadata service\"), { statusCode }));\n                req.destroy();\n            }\n            const chunks = [];\n            res.on(\"data\", (chunk) => {\n                chunks.push(chunk);\n            });\n            res.on(\"end\", () => {\n                resolve(Buffer.concat(chunks));\n                req.destroy();\n            });\n        });\n        req.end();\n    });\n}\n","export const isImdsCredentials = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.AccessKeyId === \"string\" &&\n    typeof arg.SecretAccessKey === \"string\" &&\n    typeof arg.Token === \"string\" &&\n    typeof arg.Expiration === \"string\";\nexport const fromImdsCredentials = (creds) => ({\n    accessKeyId: creds.AccessKeyId,\n    secretAccessKey: creds.SecretAccessKey,\n    sessionToken: creds.Token,\n    expiration: new Date(creds.Expiration),\n    ...(creds.AccountId && { accountId: creds.AccountId }),\n});\n","export const DEFAULT_TIMEOUT = 1000;\nexport const DEFAULT_MAX_RETRIES = 0;\nexport const providerConfigFromInit = ({ maxRetries = DEFAULT_MAX_RETRIES, timeout = DEFAULT_TIMEOUT, }) => ({ maxRetries, timeout });\n","export const retry = (toRetry, maxRetries) => {\n    let promise = toRetry();\n    for (let i = 0; i < maxRetries; i++) {\n        promise = promise.catch(toRetry);\n    }\n    return promise;\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { parse } from \"url\";\nimport { httpRequest } from \"./remoteProvider/httpRequest\";\nimport { fromImdsCredentials, isImdsCredentials } from \"./remoteProvider/ImdsCredentials\";\nimport { providerConfigFromInit } from \"./remoteProvider/RemoteProviderInit\";\nimport { retry } from \"./remoteProvider/retry\";\nexport const ENV_CMDS_FULL_URI = \"AWS_CONTAINER_CREDENTIALS_FULL_URI\";\nexport const ENV_CMDS_RELATIVE_URI = \"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\";\nexport const ENV_CMDS_AUTH_TOKEN = \"AWS_CONTAINER_AUTHORIZATION_TOKEN\";\nexport const fromContainerMetadata = (init = {}) => {\n    const { timeout, maxRetries } = providerConfigFromInit(init);\n    return () => retry(async () => {\n        const requestOptions = await getCmdsUri({ logger: init.logger });\n        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));\n        if (!isImdsCredentials(credsResponse)) {\n            throw new CredentialsProviderError(\"Invalid response received from instance metadata service.\", {\n                logger: init.logger,\n            });\n        }\n        return fromImdsCredentials(credsResponse);\n    }, maxRetries);\n};\nconst requestFromEcsImds = async (timeout, options) => {\n    if (process.env[ENV_CMDS_AUTH_TOKEN]) {\n        options.headers = {\n            ...options.headers,\n            Authorization: process.env[ENV_CMDS_AUTH_TOKEN],\n        };\n    }\n    const buffer = await httpRequest({\n        ...options,\n        timeout,\n    });\n    return buffer.toString();\n};\nconst CMDS_IP = \"169.254.170.2\";\nconst GREENGRASS_HOSTS = {\n    localhost: true,\n    \"127.0.0.1\": true,\n};\nconst GREENGRASS_PROTOCOLS = {\n    \"http:\": true,\n    \"https:\": true,\n};\nconst getCmdsUri = async ({ logger }) => {\n    if (process.env[ENV_CMDS_RELATIVE_URI]) {\n        return {\n            hostname: CMDS_IP,\n            path: process.env[ENV_CMDS_RELATIVE_URI],\n        };\n    }\n    if (process.env[ENV_CMDS_FULL_URI]) {\n        const parsed = parse(process.env[ENV_CMDS_FULL_URI]);\n        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {\n            throw new CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, {\n                tryNextLink: false,\n                logger,\n            });\n        }\n        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {\n            throw new CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, {\n                tryNextLink: false,\n                logger,\n            });\n        }\n        return {\n            ...parsed,\n            port: parsed.port ? parseInt(parsed.port, 10) : undefined,\n        };\n    }\n    throw new CredentialsProviderError(\"The container metadata credential provider cannot be used unless\" +\n        ` the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment` +\n        \" variable is set\", {\n        tryNextLink: false,\n        logger,\n    });\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nexport class InstanceMetadataV1FallbackError extends CredentialsProviderError {\n    constructor(message, tryNextLink = true) {\n        super(message, tryNextLink);\n        this.tryNextLink = tryNextLink;\n        this.name = \"InstanceMetadataV1FallbackError\";\n        Object.setPrototypeOf(this, InstanceMetadataV1FallbackError.prototype);\n    }\n}\n","export var Endpoint;\n(function (Endpoint) {\n    Endpoint[\"IPv4\"] = \"http://169.254.169.254\";\n    Endpoint[\"IPv6\"] = \"http://[fd00:ec2::254]\";\n})(Endpoint || (Endpoint = {}));\n","export const ENV_ENDPOINT_NAME = \"AWS_EC2_METADATA_SERVICE_ENDPOINT\";\nexport const CONFIG_ENDPOINT_NAME = \"ec2_metadata_service_endpoint\";\nexport const ENDPOINT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_ENDPOINT_NAME],\n    configFileSelector: (profile) => profile[CONFIG_ENDPOINT_NAME],\n    default: undefined,\n};\n","export var EndpointMode;\n(function (EndpointMode) {\n    EndpointMode[\"IPv4\"] = \"IPv4\";\n    EndpointMode[\"IPv6\"] = \"IPv6\";\n})(EndpointMode || (EndpointMode = {}));\n","import { EndpointMode } from \"./EndpointMode\";\nexport const ENV_ENDPOINT_MODE_NAME = \"AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE\";\nexport const CONFIG_ENDPOINT_MODE_NAME = \"ec2_metadata_service_endpoint_mode\";\nexport const ENDPOINT_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_ENDPOINT_MODE_NAME],\n    configFileSelector: (profile) => profile[CONFIG_ENDPOINT_MODE_NAME],\n    default: EndpointMode.IPv4,\n};\n","import { loadConfig } from \"@smithy/node-config-provider\";\nimport { parseUrl } from \"@smithy/url-parser\";\nimport { Endpoint as InstanceMetadataEndpoint } from \"../config/Endpoint\";\nimport { ENDPOINT_CONFIG_OPTIONS } from \"../config/EndpointConfigOptions\";\nimport { EndpointMode } from \"../config/EndpointMode\";\nimport { ENDPOINT_MODE_CONFIG_OPTIONS, } from \"../config/EndpointModeConfigOptions\";\nexport const getInstanceMetadataEndpoint = async () => parseUrl((await getFromEndpointConfig()) || (await getFromEndpointModeConfig()));\nconst getFromEndpointConfig = async () => loadConfig(ENDPOINT_CONFIG_OPTIONS)();\nconst getFromEndpointModeConfig = async () => {\n    const endpointMode = await loadConfig(ENDPOINT_MODE_CONFIG_OPTIONS)();\n    switch (endpointMode) {\n        case EndpointMode.IPv4:\n            return InstanceMetadataEndpoint.IPv4;\n        case EndpointMode.IPv6:\n            return InstanceMetadataEndpoint.IPv6;\n        default:\n            throw new Error(`Unsupported endpoint mode: ${endpointMode}.` + ` Select from ${Object.values(EndpointMode)}`);\n    }\n};\n","const STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;\nconst STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;\nconst STATIC_STABILITY_DOC_URL = \"https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html\";\nexport const getExtendedInstanceMetadataCredentials = (credentials, logger) => {\n    const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS +\n        Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);\n    const newExpiration = new Date(Date.now() + refreshInterval * 1000);\n    logger.warn(\"Attempting credential expiration extension due to a credential service availability issue. A refresh of these \" +\n        `credentials will be attempted after ${new Date(newExpiration)}.\\nFor more information, please visit: ` +\n        STATIC_STABILITY_DOC_URL);\n    const originalExpiration = credentials.originalExpiration ?? credentials.expiration;\n    return {\n        ...credentials,\n        ...(originalExpiration ? { originalExpiration } : {}),\n        expiration: newExpiration,\n    };\n};\n","import { getExtendedInstanceMetadataCredentials } from \"./getExtendedInstanceMetadataCredentials\";\nexport const staticStabilityProvider = (provider, options = {}) => {\n    const logger = options?.logger || console;\n    let pastCredentials;\n    return async () => {\n        let credentials;\n        try {\n            credentials = await provider();\n            if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {\n                credentials = getExtendedInstanceMetadataCredentials(credentials, logger);\n            }\n        }\n        catch (e) {\n            if (pastCredentials) {\n                logger.warn(\"Credential renew failed: \", e);\n                credentials = getExtendedInstanceMetadataCredentials(pastCredentials, logger);\n            }\n            else {\n                throw e;\n            }\n        }\n        pastCredentials = credentials;\n        return credentials;\n    };\n};\n","import { loadConfig } from \"@smithy/node-config-provider\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { InstanceMetadataV1FallbackError } from \"./error/InstanceMetadataV1FallbackError\";\nimport { httpRequest } from \"./remoteProvider/httpRequest\";\nimport { fromImdsCredentials, isImdsCredentials } from \"./remoteProvider/ImdsCredentials\";\nimport { providerConfigFromInit } from \"./remoteProvider/RemoteProviderInit\";\nimport { retry } from \"./remoteProvider/retry\";\nimport { getInstanceMetadataEndpoint } from \"./utils/getInstanceMetadataEndpoint\";\nimport { staticStabilityProvider } from \"./utils/staticStabilityProvider\";\nconst IMDS_PATH = \"/latest/meta-data/iam/security-credentials/\";\nconst IMDS_TOKEN_PATH = \"/latest/api/token\";\nconst AWS_EC2_METADATA_V1_DISABLED = \"AWS_EC2_METADATA_V1_DISABLED\";\nconst PROFILE_AWS_EC2_METADATA_V1_DISABLED = \"ec2_metadata_v1_disabled\";\nconst X_AWS_EC2_METADATA_TOKEN = \"x-aws-ec2-metadata-token\";\nexport const fromInstanceMetadata = (init = {}) => staticStabilityProvider(getInstanceMetadataProvider(init), { logger: init.logger });\nconst getInstanceMetadataProvider = (init = {}) => {\n    let disableFetchToken = false;\n    const { logger, profile } = init;\n    const { timeout, maxRetries } = providerConfigFromInit(init);\n    const getCredentials = async (maxRetries, options) => {\n        const isImdsV1Fallback = disableFetchToken || options.headers?.[X_AWS_EC2_METADATA_TOKEN] == null;\n        if (isImdsV1Fallback) {\n            let fallbackBlockedFromProfile = false;\n            let fallbackBlockedFromProcessEnv = false;\n            const configValue = await loadConfig({\n                environmentVariableSelector: (env) => {\n                    const envValue = env[AWS_EC2_METADATA_V1_DISABLED];\n                    fallbackBlockedFromProcessEnv = !!envValue && envValue !== \"false\";\n                    if (envValue === undefined) {\n                        throw new CredentialsProviderError(`${AWS_EC2_METADATA_V1_DISABLED} not set in env, checking config file next.`, { logger: init.logger });\n                    }\n                    return fallbackBlockedFromProcessEnv;\n                },\n                configFileSelector: (profile) => {\n                    const profileValue = profile[PROFILE_AWS_EC2_METADATA_V1_DISABLED];\n                    fallbackBlockedFromProfile = !!profileValue && profileValue !== \"false\";\n                    return fallbackBlockedFromProfile;\n                },\n                default: false,\n            }, {\n                profile,\n            })();\n            if (init.ec2MetadataV1Disabled || configValue) {\n                const causes = [];\n                if (init.ec2MetadataV1Disabled)\n                    causes.push(\"credential provider initialization (runtime option ec2MetadataV1Disabled)\");\n                if (fallbackBlockedFromProfile)\n                    causes.push(`config file profile (${PROFILE_AWS_EC2_METADATA_V1_DISABLED})`);\n                if (fallbackBlockedFromProcessEnv)\n                    causes.push(`process environment variable (${AWS_EC2_METADATA_V1_DISABLED})`);\n                throw new InstanceMetadataV1FallbackError(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${causes.join(\", \")}].`);\n            }\n        }\n        const imdsProfile = (await retry(async () => {\n            let profile;\n            try {\n                profile = await getProfile(options);\n            }\n            catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return profile;\n        }, maxRetries)).trim();\n        return retry(async () => {\n            let creds;\n            try {\n                creds = await getCredentialsFromProfile(imdsProfile, options, init);\n            }\n            catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return creds;\n        }, maxRetries);\n    };\n    return async () => {\n        const endpoint = await getInstanceMetadataEndpoint();\n        if (disableFetchToken) {\n            logger?.debug(\"AWS SDK Instance Metadata\", \"using v1 fallback (no token fetch)\");\n            return getCredentials(maxRetries, { ...endpoint, timeout });\n        }\n        else {\n            let token;\n            try {\n                token = (await getMetadataToken({ ...endpoint, timeout })).toString();\n            }\n            catch (error) {\n                if (error?.statusCode === 400) {\n                    throw Object.assign(error, {\n                        message: \"EC2 Metadata token request returned error\",\n                    });\n                }\n                else if (error.message === \"TimeoutError\" || [403, 404, 405].includes(error.statusCode)) {\n                    disableFetchToken = true;\n                }\n                logger?.debug(\"AWS SDK Instance Metadata\", \"using v1 fallback (initial)\");\n                return getCredentials(maxRetries, { ...endpoint, timeout });\n            }\n            return getCredentials(maxRetries, {\n                ...endpoint,\n                headers: {\n                    [X_AWS_EC2_METADATA_TOKEN]: token,\n                },\n                timeout,\n            });\n        }\n    };\n};\nconst getMetadataToken = async (options) => httpRequest({\n    ...options,\n    path: IMDS_TOKEN_PATH,\n    method: \"PUT\",\n    headers: {\n        \"x-aws-ec2-metadata-token-ttl-seconds\": \"21600\",\n    },\n});\nconst getProfile = async (options) => (await httpRequest({ ...options, path: IMDS_PATH })).toString();\nconst getCredentialsFromProfile = async (profile, options, init) => {\n    const credentialsResponse = JSON.parse((await httpRequest({\n        ...options,\n        path: IMDS_PATH + profile,\n    })).toString());\n    if (!isImdsCredentials(credentialsResponse)) {\n        throw new CredentialsProviderError(\"Invalid response received from instance metadata service.\", {\n            logger: init.logger,\n        });\n    }\n    return fromImdsCredentials(credentialsResponse);\n};\n"],"names":["InstanceMetadataEndpoint"],"mappings":"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"}