{"version":3,"file":"index.min6.mjs","sources":["../node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/retry-wrapper.js","../node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/fromHttp.js","../node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/checkUrl.js","../node_modules/@aws-sdk/credential-provider-http/dist-es/fromHttp/requestHelpers.js"],"sourcesContent":["export const retryWrapper = (toRetry, maxRetries, delayMs) => {\n    return async () => {\n        for (let i = 0; i < maxRetries; ++i) {\n            try {\n                return await toRetry();\n            }\n            catch (e) {\n                await new Promise((resolve) => setTimeout(resolve, delayMs));\n            }\n        }\n        return await toRetry();\n    };\n};\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { NodeHttpHandler } from \"@smithy/node-http-handler\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport fs from \"fs/promises\";\nimport { checkUrl } from \"./checkUrl\";\nimport { createGetRequest, getCredentials } from \"./requestHelpers\";\nimport { retryWrapper } from \"./retry-wrapper\";\nconst AWS_CONTAINER_CREDENTIALS_RELATIVE_URI = \"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\";\nconst DEFAULT_LINK_LOCAL_HOST = \"http://169.254.170.2\";\nconst AWS_CONTAINER_CREDENTIALS_FULL_URI = \"AWS_CONTAINER_CREDENTIALS_FULL_URI\";\nconst AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE = \"AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE\";\nconst AWS_CONTAINER_AUTHORIZATION_TOKEN = \"AWS_CONTAINER_AUTHORIZATION_TOKEN\";\nexport const fromHttp = (options = {}) => {\n    options.logger?.debug(\"@aws-sdk/credential-provider-http - fromHttp\");\n    let host;\n    const relative = options.awsContainerCredentialsRelativeUri ?? process.env[AWS_CONTAINER_CREDENTIALS_RELATIVE_URI];\n    const full = options.awsContainerCredentialsFullUri ?? process.env[AWS_CONTAINER_CREDENTIALS_FULL_URI];\n    const token = options.awsContainerAuthorizationToken ?? process.env[AWS_CONTAINER_AUTHORIZATION_TOKEN];\n    const tokenFile = options.awsContainerAuthorizationTokenFile ?? process.env[AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE];\n    const warn = options.logger?.constructor?.name === \"NoOpLogger\" || !options.logger ? console.warn : options.logger.warn;\n    if (relative && full) {\n        warn(\"@aws-sdk/credential-provider-http: \" +\n            \"you have set both awsContainerCredentialsRelativeUri and awsContainerCredentialsFullUri.\");\n        warn(\"awsContainerCredentialsFullUri will take precedence.\");\n    }\n    if (token && tokenFile) {\n        warn(\"@aws-sdk/credential-provider-http: \" +\n            \"you have set both awsContainerAuthorizationToken and awsContainerAuthorizationTokenFile.\");\n        warn(\"awsContainerAuthorizationToken will take precedence.\");\n    }\n    if (full) {\n        host = full;\n    }\n    else if (relative) {\n        host = `${DEFAULT_LINK_LOCAL_HOST}${relative}`;\n    }\n    else {\n        throw new CredentialsProviderError(`No HTTP credential provider host provided.\nSet AWS_CONTAINER_CREDENTIALS_FULL_URI or AWS_CONTAINER_CREDENTIALS_RELATIVE_URI.`, { logger: options.logger });\n    }\n    const url = new URL(host);\n    checkUrl(url, options.logger);\n    const requestHandler = new NodeHttpHandler({\n        requestTimeout: options.timeout ?? 1000,\n        connectionTimeout: options.timeout ?? 1000,\n    });\n    return retryWrapper(async () => {\n        const request = createGetRequest(url);\n        if (token) {\n            request.headers.Authorization = token;\n        }\n        else if (tokenFile) {\n            request.headers.Authorization = (await fs.readFile(tokenFile)).toString();\n        }\n        try {\n            const result = await requestHandler.handle(request);\n            return getCredentials(result.response).then((creds) => setCredentialFeature(creds, \"CREDENTIALS_HTTP\", \"z\"));\n        }\n        catch (e) {\n            throw new CredentialsProviderError(String(e), { logger: options.logger });\n        }\n    }, options.maxRetries ?? 3, options.timeout ?? 1000);\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nconst LOOPBACK_CIDR_IPv4 = \"127.0.0.0/8\";\nconst LOOPBACK_CIDR_IPv6 = \"::1/128\";\nconst ECS_CONTAINER_HOST = \"169.254.170.2\";\nconst EKS_CONTAINER_HOST_IPv4 = \"169.254.170.23\";\nconst EKS_CONTAINER_HOST_IPv6 = \"[fd00:ec2::23]\";\nexport const checkUrl = (url, logger) => {\n    if (url.protocol === \"https:\") {\n        return;\n    }\n    if (url.hostname === ECS_CONTAINER_HOST ||\n        url.hostname === EKS_CONTAINER_HOST_IPv4 ||\n        url.hostname === EKS_CONTAINER_HOST_IPv6) {\n        return;\n    }\n    if (url.hostname.includes(\"[\")) {\n        if (url.hostname === \"[::1]\" || url.hostname === \"[0000:0000:0000:0000:0000:0000:0000:0001]\") {\n            return;\n        }\n    }\n    else {\n        if (url.hostname === \"localhost\") {\n            return;\n        }\n        const ipComponents = url.hostname.split(\".\");\n        const inRange = (component) => {\n            const num = parseInt(component, 10);\n            return 0 <= num && num <= 255;\n        };\n        if (ipComponents[0] === \"127\" &&\n            inRange(ipComponents[1]) &&\n            inRange(ipComponents[2]) &&\n            inRange(ipComponents[3]) &&\n            ipComponents.length === 4) {\n            return;\n        }\n    }\n    throw new CredentialsProviderError(`URL not accepted. It must either be HTTPS or match one of the following:\n  - loopback CIDR 127.0.0.0/8 or [::1/128]\n  - ECS container host 169.254.170.2\n  - EKS container host 169.254.170.23 or [fd00:ec2::23]`, { logger });\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { HttpRequest } from \"@smithy/protocol-http\";\nimport { parseRfc3339DateTime } from \"@smithy/smithy-client\";\nimport { sdkStreamMixin } from \"@smithy/util-stream\";\nexport function createGetRequest(url) {\n    return new HttpRequest({\n        protocol: url.protocol,\n        hostname: url.hostname,\n        port: Number(url.port),\n        path: url.pathname,\n        query: Array.from(url.searchParams.entries()).reduce((acc, [k, v]) => {\n            acc[k] = v;\n            return acc;\n        }, {}),\n        fragment: url.hash,\n    });\n}\nexport async function getCredentials(response, logger) {\n    const stream = sdkStreamMixin(response.body);\n    const str = await stream.transformToString();\n    if (response.statusCode === 200) {\n        const parsed = JSON.parse(str);\n        if (typeof parsed.AccessKeyId !== \"string\" ||\n            typeof parsed.SecretAccessKey !== \"string\" ||\n            typeof parsed.Token !== \"string\" ||\n            typeof parsed.Expiration !== \"string\") {\n            throw new CredentialsProviderError(\"HTTP credential provider response not of the required format, an object matching: \" +\n                \"{ AccessKeyId: string, SecretAccessKey: string, Token: string, Expiration: string(rfc3339) }\", { logger });\n        }\n        return {\n            accessKeyId: parsed.AccessKeyId,\n            secretAccessKey: parsed.SecretAccessKey,\n            sessionToken: parsed.Token,\n            expiration: parseRfc3339DateTime(parsed.Expiration),\n        };\n    }\n    if (response.statusCode >= 400 && response.statusCode < 500) {\n        let parsedBody = {};\n        try {\n            parsedBody = JSON.parse(str);\n        }\n        catch (e) { }\n        throw Object.assign(new CredentialsProviderError(`Server responded with status: ${response.statusCode}`, { logger }), {\n            Code: parsedBody.Code,\n            Message: parsedBody.Message,\n        });\n    }\n    throw new CredentialsProviderError(`Server responded with status: ${response.statusCode}`, { logger });\n}\n"],"names":["fromHttp","options","host","logger","debug","relative","awsContainerCredentialsRelativeUri","process","env","full","awsContainerCredentialsFullUri","token","awsContainerAuthorizationToken","tokenFile","awsContainerAuthorizationTokenFile","warn","constructor","name","console","CredentialsProviderError","url","URL","protocol","hostname","includes","ipComponents","split","inRange","component","num","parseInt","length","checkUrl","requestHandler","NodeHttpHandler","requestTimeout","timeout","connectionTimeout","toRetry","async","request","HttpRequest","port","Number","path","pathname","query","Array","from","searchParams","entries","reduce","acc","k","v","fragment","hash","createGetRequest","headers","Authorization","fs","readFile","toString","response","stream","sdkStreamMixin","body","str","transformToString","statusCode","parsed","JSON","parse","AccessKeyId","SecretAccessKey","Token","Expiration","accessKeyId","secretAccessKey","sessionToken","expiration","parseRfc3339DateTime","parsedBody","e","Object","assign","Code","Message","getCredentials","handle","then","creds","setCredentialFeature","String","maxRetries","delayMs","i","Promise","resolve","setTimeout"],"mappings":"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"}