import{CredentialsProviderError as e,setCredentialFeature as o}from"./core.min.mjs";import{readFileSync as i}from"fs";import"buffer";import"http2";import"stream";import"http";import"https";import"zlib";import"crypto";import"path";import"os";import"process";const r=e=>async o=>{e.logger?.debug("@aws-sdk/credential-provider-web-identity - fromWebToken");const{roleArn:i,roleSessionName:r,webIdentityToken:t,providerId:n,policyArns:s,policy:l,durationSeconds:p}=e;let{roleAssumerWithWebIdentity:c}=e;if(!c){const{getDefaultRoleAssumerWithWebIdentity:i}=await import("./index.min8.mjs");c=i({...e.clientConfig,credentialProviderLogger:e.logger,parentClientConfig:{...o?.callerClientConfig,...e.parentClientConfig}},e.clientPlugins)}return c({RoleArn:i,RoleSessionName:r??`aws-sdk-js-session-${Date.now()}`,WebIdentityToken:t,ProviderId:n,PolicyArns:s,Policy:l,DurationSeconds:p})},t="AWS_WEB_IDENTITY_TOKEN_FILE",n=(n={})=>async()=>{n.logger?.debug("@aws-sdk/credential-provider-web-identity - fromTokenFile");const s=n?.webIdentityTokenFile??process.env[t],l=n?.roleArn??process.env.AWS_ROLE_ARN,p=n?.roleSessionName??process.env.AWS_ROLE_SESSION_NAME;if(!s||!l)throw new e("Web identity configuration not specified",{logger:n.logger});const c=await r({...n,webIdentityToken:i(s,{encoding:"ascii"}),roleArn:l,roleSessionName:p})();return s===process.env[t]&&o(c,"CREDENTIALS_ENV_VARS_STS_WEB_ID_TOKEN","h"),c};export{n as fromTokenFile,r as fromWebToken};
//# sourceMappingURL=index.min4.mjs.map
