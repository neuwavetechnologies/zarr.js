import"os";import"path";import{CredentialsProviderError as e,chain as r,setCredentialFeature as n,getProfileName as o,parseKnownFiles as i}from"./core.min.mjs";import"crypto";import"fs";import"buffer";import"http2";import"stream";import"http";import"https";import"zlib";import"process";const t=e=>n(e,"CREDENTIALS_PROFILE_NAMED_PROVIDER","p"),s=(e,{profile:r,logger:n})=>{const o="string"==typeof e.source_profile&&void 0===e.credential_source;return o&&n?.debug?.(`    ${r} isAssumeRoleWithSourceProfile source_profile=${e.source_profile}`),o},a=(e,{profile:r,logger:n})=>{const o="string"==typeof e.credential_source&&void 0===e.source_profile;return o&&n?.debug?.(`    ${r} isCredentialSourceProfile credential_source=${e.credential_source}`),o},l=async(i,s,a,l={})=>{a.logger?.debug("@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)");const d=s[i],{source_profile:f,region:p}=d;if(!a.roleAssumer){const{getDefaultRoleAssumer:e}=await import("./index.min8.mjs");a.roleAssumer=e({...a.clientConfig,credentialProviderLogger:a.logger,parentClientConfig:{...a?.parentClientConfig,region:p??a?.parentClientConfig?.region}},a.clientPlugins)}if(f&&f in l)throw new e(`Detected a cycle attempting to resolve credentials for profile ${o(a)}. Profiles visited: `+Object.keys(l).join(", "),{logger:a.logger});a.logger?.debug("@aws-sdk/credential-provider-ini - finding credential resolver using "+(f?`source_profile=[${f}]`:`profile=[${i}]`));const _=f?g(f,s,a,{...l,[f]:!0},c(s[f]??{})):(await((n,o,i)=>{const s={EcsContainer:async e=>{const{fromHttp:n}=await import("./index.min6.mjs"),{fromContainerMetadata:o}=await import("./index.min5.mjs");return i?.debug("@aws-sdk/credential-provider-ini - credential_source is EcsContainer"),async()=>r(n(e??{}),o(e))().then(t)},Ec2InstanceMetadata:async e=>{i?.debug("@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata");const{fromInstanceMetadata:r}=await import("./index.min5.mjs");return async()=>r(e)().then(t)},Environment:async e=>{i?.debug("@aws-sdk/credential-provider-ini - credential_source is Environment");const{fromEnv:r}=await import("./core.min.mjs").then((function(e){return e.index}));return async()=>r(e)().then(t)}};if(n in s)return s[n];throw new e(`Unsupported credential source in profile ${o}. Got ${n}, expected EcsContainer or Ec2InstanceMetadata or Environment.`,{logger:i})})(d.credential_source,i,a.logger)(a))();if(c(d))return _.then((e=>n(e,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o")));{const r={RoleArn:d.role_arn,RoleSessionName:d.role_session_name||`aws-sdk-js-${Date.now()}`,ExternalId:d.external_id,DurationSeconds:parseInt(d.duration_seconds||"3600",10)},{mfa_serial:o}=d;if(o){if(!a.mfaCodeProvider)throw new e(`Profile ${i} requires multi-factor authentication, but no MFA code callback was provided.`,{logger:a.logger,tryNextLink:!1});r.SerialNumber=o,r.TokenCode=await a.mfaCodeProvider(o)}const t=await _;return a.roleAssumer(t,r).then((e=>n(e,"CREDENTIALS_PROFILE_SOURCE_PROFILE","o")))}},c=e=>!e.role_arn&&!!e.credential_source,d=e=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.aws_access_key_id&&"string"==typeof e.aws_secret_access_key&&["undefined","string"].indexOf(typeof e.aws_session_token)>-1&&["undefined","string"].indexOf(typeof e.aws_account_id)>-1,f=async(e,r)=>{r?.logger?.debug("@aws-sdk/credential-provider-ini - resolveStaticCredentials");const o={accessKeyId:e.aws_access_key_id,secretAccessKey:e.aws_secret_access_key,sessionToken:e.aws_session_token,...e.aws_credential_scope&&{credentialScope:e.aws_credential_scope},...e.aws_account_id&&{accountId:e.aws_account_id}};return n(o,"CREDENTIALS_PROFILE","n")},g=async(r,o,i,t={},c=!1)=>{const g=o[r];if(Object.keys(t).length>0&&d(g))return f(g,i);if(c||((e,{profile:r="default",logger:n}={})=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.role_arn&&["undefined","string"].indexOf(typeof e.role_session_name)>-1&&["undefined","string"].indexOf(typeof e.external_id)>-1&&["undefined","string"].indexOf(typeof e.mfa_serial)>-1&&(s(e,{profile:r,logger:n})||a(e,{profile:r,logger:n})))(g,{profile:r,logger:i.logger}))return l(r,o,i,t);if(d(g))return f(g,i);if(p=g,Boolean(p)&&"object"==typeof p&&"string"==typeof p.web_identity_token_file&&"string"==typeof p.role_arn&&["undefined","string"].indexOf(typeof p.role_session_name)>-1)return(async(e,r)=>import("./index.min4.mjs").then((({fromTokenFile:o})=>o({webIdentityTokenFile:e.web_identity_token_file,roleArn:e.role_arn,roleSessionName:e.role_session_name,roleAssumerWithWebIdentity:r.roleAssumerWithWebIdentity,logger:r.logger,parentClientConfig:r.parentClientConfig})().then((e=>n(e,"CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN","q"))))))(g,i);var p;if((e=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.credential_process)(g))return(async(e,r)=>import("./index.min3.mjs").then((({fromProcess:o})=>o({...e,profile:r})().then((e=>n(e,"CREDENTIALS_PROFILE_PROCESS","v"))))))(i,r);if((e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name))(g))return await(async(e,r,o={})=>{const{fromSSO:i}=await import("./index.min.mjs");return i({profile:e,logger:o.logger,parentClientConfig:o.parentClientConfig,clientConfig:o.clientConfig})().then((e=>r.sso_session?n(e,"CREDENTIALS_PROFILE_SSO","r"):n(e,"CREDENTIALS_PROFILE_SSO_LEGACY","t")))})(r,g,i);throw new e(`Could not resolve credentials using profile: [${r}] in configuration/credentials file(s).`,{logger:i.logger})},p=(e={})=>async({callerClientConfig:r}={})=>{const n={...e,parentClientConfig:{...r,...e.parentClientConfig}};n.logger?.debug("@aws-sdk/credential-provider-ini - fromIni");const t=await i(n);return g(o({profile:e.profile??r?.profile}),t,n)};export{p as fromIni};
//# sourceMappingURL=index.min2.mjs.map
