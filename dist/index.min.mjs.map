{"version":3,"file":"index.min.mjs","sources":["../node_modules/@aws-sdk/credential-provider-sso/dist-es/isSsoProfile.js","../node_modules/@aws-sdk/token-providers/dist-es/constants.js","../node_modules/@aws-sdk/token-providers/dist-es/getNewSsoOidcToken.js","../node_modules/@aws-sdk/token-providers/dist-es/getSsoOidcClient.js","../node_modules/@aws-sdk/token-providers/dist-es/validateTokenExpiry.js","../node_modules/@aws-sdk/token-providers/dist-es/validateTokenKey.js","../node_modules/@aws-sdk/token-providers/dist-es/writeSSOTokenToFile.js","../node_modules/@aws-sdk/token-providers/dist-es/fromSso.js","../node_modules/@aws-sdk/credential-provider-sso/dist-es/resolveSSOCredentials.js","../node_modules/@aws-sdk/credential-provider-sso/dist-es/validateSsoProfile.js","../node_modules/@aws-sdk/credential-provider-sso/dist-es/fromSSO.js"],"sourcesContent":["export const isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === \"string\" ||\n        typeof arg.sso_account_id === \"string\" ||\n        typeof arg.sso_session === \"string\" ||\n        typeof arg.sso_region === \"string\" ||\n        typeof arg.sso_role_name === \"string\");\n","export const EXPIRE_WINDOW_MS = 5 * 60 * 1000;\nexport const REFRESH_MESSAGE = `To refresh this SSO session run 'aws sso login' with the corresponding profile.`;\n","import { getSsoOidcClient } from \"./getSsoOidcClient\";\nexport const getNewSsoOidcToken = async (ssoToken, ssoRegion, init = {}) => {\n    const { CreateTokenCommand } = await import(\"@aws-sdk/nested-clients/sso-oidc\");\n    const ssoOidcClient = await getSsoOidcClient(ssoRegion, init);\n    return ssoOidcClient.send(new CreateTokenCommand({\n        clientId: ssoToken.clientId,\n        clientSecret: ssoToken.clientSecret,\n        refreshToken: ssoToken.refreshToken,\n        grantType: \"refresh_token\",\n    }));\n};\n","export const getSsoOidcClient = async (ssoRegion, init = {}) => {\n    const { SSOOIDCClient } = await import(\"@aws-sdk/nested-clients/sso-oidc\");\n    const ssoOidcClient = new SSOOIDCClient(Object.assign({}, init.clientConfig ?? {}, {\n        region: ssoRegion ?? init.clientConfig?.region,\n        logger: init.clientConfig?.logger ?? init.parentClientConfig?.logger,\n    }));\n    return ssoOidcClient;\n};\n","import { TokenProviderError } from \"@smithy/property-provider\";\nimport { REFRESH_MESSAGE } from \"./constants\";\nexport const validateTokenExpiry = (token) => {\n    if (token.expiration && token.expiration.getTime() < Date.now()) {\n        throw new TokenProviderError(`Token is expired. ${REFRESH_MESSAGE}`, false);\n    }\n};\n","import { TokenProviderError } from \"@smithy/property-provider\";\nimport { REFRESH_MESSAGE } from \"./constants\";\nexport const validateTokenKey = (key, value, forRefresh = false) => {\n    if (typeof value === \"undefined\") {\n        throw new TokenProviderError(`Value not present for '${key}' in SSO Token${forRefresh ? \". Cannot refresh\" : \"\"}. ${REFRESH_MESSAGE}`, false);\n    }\n};\n","import { getSSOTokenFilepath } from \"@smithy/shared-ini-file-loader\";\nimport { promises as fsPromises } from \"fs\";\nconst { writeFile } = fsPromises;\nexport const writeSSOTokenToFile = (id, ssoToken) => {\n    const tokenFilepath = getSSOTokenFilepath(id);\n    const tokenString = JSON.stringify(ssoToken, null, 2);\n    return writeFile(tokenFilepath, tokenString);\n};\n","import { TokenProviderError } from \"@smithy/property-provider\";\nimport { getProfileName, getSSOTokenFromFile, loadSsoSessionData, parseKnownFiles, } from \"@smithy/shared-ini-file-loader\";\nimport { EXPIRE_WINDOW_MS, REFRESH_MESSAGE } from \"./constants\";\nimport { getNewSsoOidcToken } from \"./getNewSsoOidcToken\";\nimport { validateTokenExpiry } from \"./validateTokenExpiry\";\nimport { validateTokenKey } from \"./validateTokenKey\";\nimport { writeSSOTokenToFile } from \"./writeSSOTokenToFile\";\nconst lastRefreshAttemptTime = new Date(0);\nexport const fromSso = (_init = {}) => async ({ callerClientConfig } = {}) => {\n    const init = {\n        ..._init,\n        parentClientConfig: {\n            ...callerClientConfig,\n            ..._init.parentClientConfig,\n        },\n    };\n    init.logger?.debug(\"@aws-sdk/token-providers - fromSso\");\n    const profiles = await parseKnownFiles(init);\n    const profileName = getProfileName({\n        profile: init.profile ?? callerClientConfig?.profile,\n    });\n    const profile = profiles[profileName];\n    if (!profile) {\n        throw new TokenProviderError(`Profile '${profileName}' could not be found in shared credentials file.`, false);\n    }\n    else if (!profile[\"sso_session\"]) {\n        throw new TokenProviderError(`Profile '${profileName}' is missing required property 'sso_session'.`);\n    }\n    const ssoSessionName = profile[\"sso_session\"];\n    const ssoSessions = await loadSsoSessionData(init);\n    const ssoSession = ssoSessions[ssoSessionName];\n    if (!ssoSession) {\n        throw new TokenProviderError(`Sso session '${ssoSessionName}' could not be found in shared credentials file.`, false);\n    }\n    for (const ssoSessionRequiredKey of [\"sso_start_url\", \"sso_region\"]) {\n        if (!ssoSession[ssoSessionRequiredKey]) {\n            throw new TokenProviderError(`Sso session '${ssoSessionName}' is missing required property '${ssoSessionRequiredKey}'.`, false);\n        }\n    }\n    const ssoStartUrl = ssoSession[\"sso_start_url\"];\n    const ssoRegion = ssoSession[\"sso_region\"];\n    let ssoToken;\n    try {\n        ssoToken = await getSSOTokenFromFile(ssoSessionName);\n    }\n    catch (e) {\n        throw new TokenProviderError(`The SSO session token associated with profile=${profileName} was not found or is invalid. ${REFRESH_MESSAGE}`, false);\n    }\n    validateTokenKey(\"accessToken\", ssoToken.accessToken);\n    validateTokenKey(\"expiresAt\", ssoToken.expiresAt);\n    const { accessToken, expiresAt } = ssoToken;\n    const existingToken = { token: accessToken, expiration: new Date(expiresAt) };\n    if (existingToken.expiration.getTime() - Date.now() > EXPIRE_WINDOW_MS) {\n        return existingToken;\n    }\n    if (Date.now() - lastRefreshAttemptTime.getTime() < 30 * 1000) {\n        validateTokenExpiry(existingToken);\n        return existingToken;\n    }\n    validateTokenKey(\"clientId\", ssoToken.clientId, true);\n    validateTokenKey(\"clientSecret\", ssoToken.clientSecret, true);\n    validateTokenKey(\"refreshToken\", ssoToken.refreshToken, true);\n    try {\n        lastRefreshAttemptTime.setTime(Date.now());\n        const newSsoOidcToken = await getNewSsoOidcToken(ssoToken, ssoRegion, init);\n        validateTokenKey(\"accessToken\", newSsoOidcToken.accessToken);\n        validateTokenKey(\"expiresIn\", newSsoOidcToken.expiresIn);\n        const newTokenExpiration = new Date(Date.now() + newSsoOidcToken.expiresIn * 1000);\n        try {\n            await writeSSOTokenToFile(ssoSessionName, {\n                ...ssoToken,\n                accessToken: newSsoOidcToken.accessToken,\n                expiresAt: newTokenExpiration.toISOString(),\n                refreshToken: newSsoOidcToken.refreshToken,\n            });\n        }\n        catch (error) {\n        }\n        return {\n            token: newSsoOidcToken.accessToken,\n            expiration: newTokenExpiration,\n        };\n    }\n    catch (error) {\n        validateTokenExpiry(existingToken);\n        return existingToken;\n    }\n};\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { fromSso as getSsoTokenProvider } from \"@aws-sdk/token-providers\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getSSOTokenFromFile } from \"@smithy/shared-ini-file-loader\";\nconst SHOULD_FAIL_CREDENTIAL_CHAIN = false;\nexport const resolveSSOCredentials = async ({ ssoStartUrl, ssoSession, ssoAccountId, ssoRegion, ssoRoleName, ssoClient, clientConfig, parentClientConfig, profile, logger, }) => {\n    let token;\n    const refreshMessage = `To refresh this SSO session run aws sso login with the corresponding profile.`;\n    if (ssoSession) {\n        try {\n            const _token = await getSsoTokenProvider({ profile })();\n            token = {\n                accessToken: _token.token,\n                expiresAt: new Date(_token.expiration).toISOString(),\n            };\n        }\n        catch (e) {\n            throw new CredentialsProviderError(e.message, {\n                tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n                logger,\n            });\n        }\n    }\n    else {\n        try {\n            token = await getSSOTokenFromFile(ssoStartUrl);\n        }\n        catch (e) {\n            throw new CredentialsProviderError(`The SSO session associated with this profile is invalid. ${refreshMessage}`, {\n                tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n                logger,\n            });\n        }\n    }\n    if (new Date(token.expiresAt).getTime() - Date.now() <= 0) {\n        throw new CredentialsProviderError(`The SSO session associated with this profile has expired. ${refreshMessage}`, {\n            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n            logger,\n        });\n    }\n    const { accessToken } = token;\n    const { SSOClient, GetRoleCredentialsCommand } = await import(\"./loadSso\");\n    const sso = ssoClient ||\n        new SSOClient(Object.assign({}, clientConfig ?? {}, {\n            logger: clientConfig?.logger ?? parentClientConfig?.logger,\n            region: clientConfig?.region ?? ssoRegion,\n        }));\n    let ssoResp;\n    try {\n        ssoResp = await sso.send(new GetRoleCredentialsCommand({\n            accountId: ssoAccountId,\n            roleName: ssoRoleName,\n            accessToken,\n        }));\n    }\n    catch (e) {\n        throw new CredentialsProviderError(e, {\n            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n            logger,\n        });\n    }\n    const { roleCredentials: { accessKeyId, secretAccessKey, sessionToken, expiration, credentialScope, accountId } = {}, } = ssoResp;\n    if (!accessKeyId || !secretAccessKey || !sessionToken || !expiration) {\n        throw new CredentialsProviderError(\"SSO returns an invalid temporary credential.\", {\n            tryNextLink: SHOULD_FAIL_CREDENTIAL_CHAIN,\n            logger,\n        });\n    }\n    const credentials = {\n        accessKeyId,\n        secretAccessKey,\n        sessionToken,\n        expiration: new Date(expiration),\n        ...(credentialScope && { credentialScope }),\n        ...(accountId && { accountId }),\n    };\n    if (ssoSession) {\n        setCredentialFeature(credentials, \"CREDENTIALS_SSO\", \"s\");\n    }\n    else {\n        setCredentialFeature(credentials, \"CREDENTIALS_SSO_LEGACY\", \"u\");\n    }\n    return credentials;\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nexport const validateSsoProfile = (profile, logger) => {\n    const { sso_start_url, sso_account_id, sso_region, sso_role_name } = profile;\n    if (!sso_start_url || !sso_account_id || !sso_region || !sso_role_name) {\n        throw new CredentialsProviderError(`Profile is configured with invalid SSO credentials. Required parameters \"sso_account_id\", ` +\n            `\"sso_region\", \"sso_role_name\", \"sso_start_url\". Got ${Object.keys(profile).join(\", \")}\\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`, { tryNextLink: false, logger });\n    }\n    return profile;\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getProfileName, loadSsoSessionData, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { isSsoProfile } from \"./isSsoProfile\";\nimport { resolveSSOCredentials } from \"./resolveSSOCredentials\";\nimport { validateSsoProfile } from \"./validateSsoProfile\";\nexport const fromSSO = (init = {}) => async ({ callerClientConfig } = {}) => {\n    init.logger?.debug(\"@aws-sdk/credential-provider-sso - fromSSO\");\n    const { ssoStartUrl, ssoAccountId, ssoRegion, ssoRoleName, ssoSession } = init;\n    const { ssoClient } = init;\n    const profileName = getProfileName({\n        profile: init.profile ?? callerClientConfig?.profile,\n    });\n    if (!ssoStartUrl && !ssoAccountId && !ssoRegion && !ssoRoleName && !ssoSession) {\n        const profiles = await parseKnownFiles(init);\n        const profile = profiles[profileName];\n        if (!profile) {\n            throw new CredentialsProviderError(`Profile ${profileName} was not found.`, { logger: init.logger });\n        }\n        if (!isSsoProfile(profile)) {\n            throw new CredentialsProviderError(`Profile ${profileName} is not configured with SSO credentials.`, {\n                logger: init.logger,\n            });\n        }\n        if (profile?.sso_session) {\n            const ssoSessions = await loadSsoSessionData(init);\n            const session = ssoSessions[profile.sso_session];\n            const conflictMsg = ` configurations in profile ${profileName} and sso-session ${profile.sso_session}`;\n            if (ssoRegion && ssoRegion !== session.sso_region) {\n                throw new CredentialsProviderError(`Conflicting SSO region` + conflictMsg, {\n                    tryNextLink: false,\n                    logger: init.logger,\n                });\n            }\n            if (ssoStartUrl && ssoStartUrl !== session.sso_start_url) {\n                throw new CredentialsProviderError(`Conflicting SSO start_url` + conflictMsg, {\n                    tryNextLink: false,\n                    logger: init.logger,\n                });\n            }\n            profile.sso_region = session.sso_region;\n            profile.sso_start_url = session.sso_start_url;\n        }\n        const { sso_start_url, sso_account_id, sso_region, sso_role_name, sso_session } = validateSsoProfile(profile, init.logger);\n        return resolveSSOCredentials({\n            ssoStartUrl: sso_start_url,\n            ssoSession: sso_session,\n            ssoAccountId: sso_account_id,\n            ssoRegion: sso_region,\n            ssoRoleName: sso_role_name,\n            ssoClient: ssoClient,\n            clientConfig: init.clientConfig,\n            parentClientConfig: init.parentClientConfig,\n            profile: profileName,\n        });\n    }\n    else if (!ssoStartUrl || !ssoAccountId || !ssoRegion || !ssoRoleName) {\n        throw new CredentialsProviderError(\"Incomplete configuration. The fromSSO() argument hash must include \" +\n            '\"ssoStartUrl\", \"ssoAccountId\", \"ssoRegion\", \"ssoRoleName\"', { tryNextLink: false, logger: init.logger });\n    }\n    else {\n        return resolveSSOCredentials({\n            ssoStartUrl,\n            ssoSession,\n            ssoAccountId,\n            ssoRegion,\n            ssoRoleName,\n            ssoClient,\n            clientConfig: init.clientConfig,\n            parentClientConfig: init.parentClientConfig,\n            profile: profileName,\n        });\n    }\n};\n"],"names":["isSsoProfile","arg","sso_start_url","sso_account_id","sso_session","sso_region","sso_role_name","REFRESH_MESSAGE","getNewSsoOidcToken","async","ssoToken","ssoRegion","init","CreateTokenCommand","import","ssoOidcClient","SSOOIDCClient","Object","assign","clientConfig","region","logger","parentClientConfig","getSsoOidcClient","send","clientId","clientSecret","refreshToken","grantType","validateTokenExpiry","token","expiration","getTime","Date","now","TokenProviderError","validateTokenKey","key","value","forRefresh","writeFile","fsPromises","lastRefreshAttemptTime","fromSso","_init","callerClientConfig","debug","profiles","parseKnownFiles","profileName","getProfileName","profile","ssoSessionName","ssoSession","loadSsoSessionData","ssoSessionRequiredKey","getSSOTokenFromFile","e","accessToken","expiresAt","existingToken","setTime","newSsoOidcToken","expiresIn","newTokenExpiration","id","tokenFilepath","getSSOTokenFilepath","tokenString","JSON","stringify","writeSSOTokenToFile","toISOString","error","SHOULD_FAIL_CREDENTIAL_CHAIN","resolveSSOCredentials","ssoStartUrl","ssoAccountId","ssoRoleName","ssoClient","refreshMessage","_token","getSsoTokenProvider","CredentialsProviderError","message","tryNextLink","SSOClient","GetRoleCredentialsCommand","sso","ssoResp","accountId","roleName","roleCredentials","accessKeyId","secretAccessKey","sessionToken","credentialScope","credentials","setCredentialFeature","validateSsoProfile","keys","join","fromSSO","session","conflictMsg"],"mappings":"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"}