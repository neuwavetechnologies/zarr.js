{"version":3,"file":"index-b25f489e.js","sources":["../node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveCredentialSource.js","../node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveAssumeRoleCredentials.js","../node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProcessCredentials.js","../node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveSsoCredentials.js","../node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveStaticCredentials.js","../node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveWebIdentityCredentials.js","../node_modules/@aws-sdk/credential-provider-ini/dist-es/resolveProfileData.js","../node_modules/@aws-sdk/credential-provider-ini/dist-es/fromIni.js"],"sourcesContent":["import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { chain, CredentialsProviderError } from \"@smithy/property-provider\";\nexport const resolveCredentialSource = (credentialSource, profileName, logger) => {\n    const sourceProvidersMap = {\n        EcsContainer: async (options) => {\n            const { fromHttp } = await import(\"@aws-sdk/credential-provider-http\");\n            const { fromContainerMetadata } = await import(\"@smithy/credential-provider-imds\");\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is EcsContainer\");\n            return async () => chain(fromHttp(options ?? {}), fromContainerMetadata(options))().then(setNamedProvider);\n        },\n        Ec2InstanceMetadata: async (options) => {\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is Ec2InstanceMetadata\");\n            const { fromInstanceMetadata } = await import(\"@smithy/credential-provider-imds\");\n            return async () => fromInstanceMetadata(options)().then(setNamedProvider);\n        },\n        Environment: async (options) => {\n            logger?.debug(\"@aws-sdk/credential-provider-ini - credential_source is Environment\");\n            const { fromEnv } = await import(\"@aws-sdk/credential-provider-env\");\n            return async () => fromEnv(options)().then(setNamedProvider);\n        },\n    };\n    if (credentialSource in sourceProvidersMap) {\n        return sourceProvidersMap[credentialSource];\n    }\n    else {\n        throw new CredentialsProviderError(`Unsupported credential source in profile ${profileName}. Got ${credentialSource}, ` +\n            `expected EcsContainer or Ec2InstanceMetadata or Environment.`, { logger });\n    }\n};\nconst setNamedProvider = (creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_NAMED_PROVIDER\", \"p\");\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { getProfileName } from \"@smithy/shared-ini-file-loader\";\nimport { resolveCredentialSource } from \"./resolveCredentialSource\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const isAssumeRoleProfile = (arg, { profile = \"default\", logger } = {}) => {\n    return (Boolean(arg) &&\n        typeof arg === \"object\" &&\n        typeof arg.role_arn === \"string\" &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1 &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.external_id) > -1 &&\n        [\"undefined\", \"string\"].indexOf(typeof arg.mfa_serial) > -1 &&\n        (isAssumeRoleWithSourceProfile(arg, { profile, logger }) || isCredentialSourceProfile(arg, { profile, logger })));\n};\nconst isAssumeRoleWithSourceProfile = (arg, { profile, logger }) => {\n    const withSourceProfile = typeof arg.source_profile === \"string\" && typeof arg.credential_source === \"undefined\";\n    if (withSourceProfile) {\n        logger?.debug?.(`    ${profile} isAssumeRoleWithSourceProfile source_profile=${arg.source_profile}`);\n    }\n    return withSourceProfile;\n};\nconst isCredentialSourceProfile = (arg, { profile, logger }) => {\n    const withProviderProfile = typeof arg.credential_source === \"string\" && typeof arg.source_profile === \"undefined\";\n    if (withProviderProfile) {\n        logger?.debug?.(`    ${profile} isCredentialSourceProfile credential_source=${arg.credential_source}`);\n    }\n    return withProviderProfile;\n};\nexport const resolveAssumeRoleCredentials = async (profileName, profiles, options, visitedProfiles = {}) => {\n    options.logger?.debug(\"@aws-sdk/credential-provider-ini - resolveAssumeRoleCredentials (STS)\");\n    const profileData = profiles[profileName];\n    const { source_profile, region } = profileData;\n    if (!options.roleAssumer) {\n        const { getDefaultRoleAssumer } = await import(\"@aws-sdk/nested-clients/sts\");\n        options.roleAssumer = getDefaultRoleAssumer({\n            ...options.clientConfig,\n            credentialProviderLogger: options.logger,\n            parentClientConfig: {\n                ...options?.parentClientConfig,\n                region: region ?? options?.parentClientConfig?.region,\n            },\n        }, options.clientPlugins);\n    }\n    if (source_profile && source_profile in visitedProfiles) {\n        throw new CredentialsProviderError(`Detected a cycle attempting to resolve credentials for profile` +\n            ` ${getProfileName(options)}. Profiles visited: ` +\n            Object.keys(visitedProfiles).join(\", \"), { logger: options.logger });\n    }\n    options.logger?.debug(`@aws-sdk/credential-provider-ini - finding credential resolver using ${source_profile ? `source_profile=[${source_profile}]` : `profile=[${profileName}]`}`);\n    const sourceCredsProvider = source_profile\n        ? resolveProfileData(source_profile, profiles, options, {\n            ...visitedProfiles,\n            [source_profile]: true,\n        }, isCredentialSourceWithoutRoleArn(profiles[source_profile] ?? {}))\n        : (await resolveCredentialSource(profileData.credential_source, profileName, options.logger)(options))();\n    if (isCredentialSourceWithoutRoleArn(profileData)) {\n        return sourceCredsProvider.then((creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_SOURCE_PROFILE\", \"o\"));\n    }\n    else {\n        const params = {\n            RoleArn: profileData.role_arn,\n            RoleSessionName: profileData.role_session_name || `aws-sdk-js-${Date.now()}`,\n            ExternalId: profileData.external_id,\n            DurationSeconds: parseInt(profileData.duration_seconds || \"3600\", 10),\n        };\n        const { mfa_serial } = profileData;\n        if (mfa_serial) {\n            if (!options.mfaCodeProvider) {\n                throw new CredentialsProviderError(`Profile ${profileName} requires multi-factor authentication, but no MFA code callback was provided.`, { logger: options.logger, tryNextLink: false });\n            }\n            params.SerialNumber = mfa_serial;\n            params.TokenCode = await options.mfaCodeProvider(mfa_serial);\n        }\n        const sourceCreds = await sourceCredsProvider;\n        return options.roleAssumer(sourceCreds, params).then((creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_SOURCE_PROFILE\", \"o\"));\n    }\n};\nconst isCredentialSourceWithoutRoleArn = (section) => {\n    return !section.role_arn && !!section.credential_source;\n};\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const isProcessProfile = (arg) => Boolean(arg) && typeof arg === \"object\" && typeof arg.credential_process === \"string\";\nexport const resolveProcessCredentials = async (options, profile) => import(\"@aws-sdk/credential-provider-process\").then(({ fromProcess }) => fromProcess({\n    ...options,\n    profile,\n})().then((creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_PROCESS\", \"v\")));\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const resolveSsoCredentials = async (profile, profileData, options = {}) => {\n    const { fromSSO } = await import(\"@aws-sdk/credential-provider-sso\");\n    return fromSSO({\n        profile,\n        logger: options.logger,\n        parentClientConfig: options.parentClientConfig,\n        clientConfig: options.clientConfig,\n    })().then((creds) => {\n        if (profileData.sso_session) {\n            return setCredentialFeature(creds, \"CREDENTIALS_PROFILE_SSO\", \"r\");\n        }\n        else {\n            return setCredentialFeature(creds, \"CREDENTIALS_PROFILE_SSO_LEGACY\", \"t\");\n        }\n    });\n};\nexport const isSsoProfile = (arg) => arg &&\n    (typeof arg.sso_start_url === \"string\" ||\n        typeof arg.sso_account_id === \"string\" ||\n        typeof arg.sso_session === \"string\" ||\n        typeof arg.sso_region === \"string\" ||\n        typeof arg.sso_role_name === \"string\");\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const isStaticCredsProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.aws_access_key_id === \"string\" &&\n    typeof arg.aws_secret_access_key === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.aws_session_token) > -1 &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.aws_account_id) > -1;\nexport const resolveStaticCredentials = async (profile, options) => {\n    options?.logger?.debug(\"@aws-sdk/credential-provider-ini - resolveStaticCredentials\");\n    const credentials = {\n        accessKeyId: profile.aws_access_key_id,\n        secretAccessKey: profile.aws_secret_access_key,\n        sessionToken: profile.aws_session_token,\n        ...(profile.aws_credential_scope && { credentialScope: profile.aws_credential_scope }),\n        ...(profile.aws_account_id && { accountId: profile.aws_account_id }),\n    };\n    return setCredentialFeature(credentials, \"CREDENTIALS_PROFILE\", \"n\");\n};\n","import { setCredentialFeature } from \"@aws-sdk/core/client\";\nexport const isWebIdentityProfile = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.web_identity_token_file === \"string\" &&\n    typeof arg.role_arn === \"string\" &&\n    [\"undefined\", \"string\"].indexOf(typeof arg.role_session_name) > -1;\nexport const resolveWebIdentityCredentials = async (profile, options) => import(\"@aws-sdk/credential-provider-web-identity\").then(({ fromTokenFile }) => fromTokenFile({\n    webIdentityTokenFile: profile.web_identity_token_file,\n    roleArn: profile.role_arn,\n    roleSessionName: profile.role_session_name,\n    roleAssumerWithWebIdentity: options.roleAssumerWithWebIdentity,\n    logger: options.logger,\n    parentClientConfig: options.parentClientConfig,\n})().then((creds) => setCredentialFeature(creds, \"CREDENTIALS_PROFILE_STS_WEB_ID_TOKEN\", \"q\")));\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { isAssumeRoleProfile, resolveAssumeRoleCredentials } from \"./resolveAssumeRoleCredentials\";\nimport { isProcessProfile, resolveProcessCredentials } from \"./resolveProcessCredentials\";\nimport { isSsoProfile, resolveSsoCredentials } from \"./resolveSsoCredentials\";\nimport { isStaticCredsProfile, resolveStaticCredentials } from \"./resolveStaticCredentials\";\nimport { isWebIdentityProfile, resolveWebIdentityCredentials } from \"./resolveWebIdentityCredentials\";\nexport const resolveProfileData = async (profileName, profiles, options, visitedProfiles = {}, isAssumeRoleRecursiveCall = false) => {\n    const data = profiles[profileName];\n    if (Object.keys(visitedProfiles).length > 0 && isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data, options);\n    }\n    if (isAssumeRoleRecursiveCall || isAssumeRoleProfile(data, { profile: profileName, logger: options.logger })) {\n        return resolveAssumeRoleCredentials(profileName, profiles, options, visitedProfiles);\n    }\n    if (isStaticCredsProfile(data)) {\n        return resolveStaticCredentials(data, options);\n    }\n    if (isWebIdentityProfile(data)) {\n        return resolveWebIdentityCredentials(data, options);\n    }\n    if (isProcessProfile(data)) {\n        return resolveProcessCredentials(options, profileName);\n    }\n    if (isSsoProfile(data)) {\n        return await resolveSsoCredentials(profileName, data, options);\n    }\n    throw new CredentialsProviderError(`Could not resolve credentials using profile: [${profileName}] in configuration/credentials file(s).`, { logger: options.logger });\n};\n","import { getProfileName, parseKnownFiles } from \"@smithy/shared-ini-file-loader\";\nimport { resolveProfileData } from \"./resolveProfileData\";\nexport const fromIni = (_init = {}) => async ({ callerClientConfig } = {}) => {\n    const init = {\n        ..._init,\n        parentClientConfig: {\n            ...callerClientConfig,\n            ..._init.parentClientConfig,\n        },\n    };\n    init.logger?.debug(\"@aws-sdk/credential-provider-ini - fromIni\");\n    const profiles = await parseKnownFiles(init);\n    return resolveProfileData(getProfileName({\n        profile: _init.profile ?? callerClientConfig?.profile,\n    }), profiles, init);\n};\n"],"names":["chain","CredentialsProviderError","setCredentialFeature","getProfileName","parseKnownFiles"],"mappings":"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"}