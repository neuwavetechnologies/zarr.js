import{getSmithyContext as e,normalizeProvider as t,resolveAwsSdkSigV4Config as n,EndpointCache as o,customEndpointFunctions as s,awsEndpointFunctions as r,resolveEndpoint as i,fromBase64 as a,toBase64 as c,AwsSdkSigV4Signer as l,NoAuthSigner as d,NoOpLogger as u,parseUrl as p,fromUtf8 as m,toUtf8 as h,emitWarningIfUnsupportedVersion as g,emitWarningIfUnsupportedVersion$1 as f,calculateBodyLength as y,createDefaultUserAgentProvider as S,loadConfig as P,NODE_MAX_ATTEMPT_CONFIG_OPTIONS as E,NODE_REGION_CONFIG_FILE_OPTIONS as w,NODE_REGION_CONFIG_OPTIONS as b,NodeHttpHandler as I,NODE_RETRY_MODE_CONFIG_OPTIONS as A,DEFAULT_RETRY_MODE as v,Hash as C,streamCollector as x,NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS as R,NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS as k,NODE_APP_ID_CONFIG_OPTIONS as T,resolveDefaultsModeConfig as D,loadConfigsForDefaultMode as $,getDefaultExtensionConfiguration as O,getHttpHandlerExtensionConfiguration as j,resolveAwsRegionExtensionConfiguration as W,resolveDefaultRuntimeConfig as z,resolveHttpHandlerRuntimeConfig as K,getAwsRegionExtensionConfiguration as U,Client as q,resolveUserAgentConfig as F,resolveRetryConfig as _,resolveRegionConfig as L,resolveEndpointConfig as H,getUserAgentPlugin as M,getRetryPlugin as N,getContentLengthPlugin as G,getHostHeaderPlugin as V,getLoggerPlugin as B,getRecursionDetectionPlugin as J,getHttpAuthSchemeEndpointRuleSetPlugin as Q,DefaultIdentityProviderConfig as X,getHttpSigningPlugin as Y,resolveHostHeaderConfig as Z,ServiceException as ee,SENSITIVE_STRING as te,parseXmlBody as ne,parseXmlErrorBody as oe,decorateServiceException as se,strictParseInt32 as re,expectString as ie,expectNonNull as ae,parseRfc3339DateTimeWithOffset as ce,withBaseException as le,HttpRequest as de,extendedEncodeURIComponent as ue,Command as pe,getSerdePlugin as me,getEndpointPlugin as he,createAggregatedClient as ge,setCredentialFeature as fe}from"./core.min.mjs";export{Command as $Command,Client as __Client}from"./core.min.mjs";import"buffer";import"stream";import"http";import"https";import"http2";import"os";import"path";import"crypto";import"fs";import{packageInfo as ye}from"./package.min.mjs";import"zlib";import"process";const Se=async(n,o,s)=>({operation:e(o).operation,region:await t(n.region)()||(()=>{throw new Error("expected `region` to be configured for `aws.auth#sigv4`")})()});const Pe=e=>{const t=[];if("AssumeRoleWithWebIdentity"===e.operation)t.push({schemeId:"smithy.api#noAuth"});else t.push(function(e){return{schemeId:"aws.auth#sigv4",signingProperties:{name:"sts",region:e.region},propertiesExtractor:(e,t)=>({signingProperties:{config:e,context:t}})}}(e));return t},Ee=e=>{const t=(o=e,{...o,stsClientCtor:ct});var o;return{...n(t)}},we={UseGlobalEndpoint:{type:"builtInParams",name:"useGlobalEndpoint"},UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}},be="required",Ie="type",Ae="fn",ve="argv",Ce="ref",xe=!1,Re=!0,ke="booleanEquals",Te="stringEquals",De="sigv4",$e="us-east-1",Oe="endpoint",je="https://sts.{Region}.{PartitionResult#dnsSuffix}",We="tree",ze="error",Ke="getAttr",Ue={[be]:!1,[Ie]:"String"},qe={[be]:!0,default:!1,[Ie]:"Boolean"},Fe={[Ce]:"Endpoint"},_e={[Ae]:"isSet",[ve]:[{[Ce]:"Region"}]},Le={[Ce]:"Region"},He={[Ae]:"aws.partition",[ve]:[Le],assign:"PartitionResult"},Me={[Ce]:"UseFIPS"},Ne={[Ce]:"UseDualStack"},Ge={url:"https://sts.amazonaws.com",properties:{authSchemes:[{name:De,signingName:"sts",signingRegion:$e}]},headers:{}},Ve={},Be={conditions:[{[Ae]:Te,[ve]:[Le,"aws-global"]}],[Oe]:Ge,[Ie]:Oe},Je={[Ae]:ke,[ve]:[Me,!0]},Qe={[Ae]:ke,[ve]:[Ne,!0]},Xe={[Ae]:Ke,[ve]:[{[Ce]:"PartitionResult"},"supportsFIPS"]},Ye={[Ce]:"PartitionResult"},Ze={[Ae]:ke,[ve]:[!0,{[Ae]:Ke,[ve]:[Ye,"supportsDualStack"]}]},et=[{[Ae]:"isSet",[ve]:[Fe]}],tt=[Je],nt=[Qe],ot={version:"1.0",parameters:{Region:Ue,UseDualStack:qe,UseFIPS:qe,Endpoint:Ue,UseGlobalEndpoint:qe},rules:[{conditions:[{[Ae]:ke,[ve]:[{[Ce]:"UseGlobalEndpoint"},Re]},{[Ae]:"not",[ve]:et},_e,He,{[Ae]:ke,[ve]:[Me,xe]},{[Ae]:ke,[ve]:[Ne,xe]}],rules:[{conditions:[{[Ae]:Te,[ve]:[Le,"ap-northeast-1"]}],endpoint:Ge,[Ie]:Oe},{conditions:[{[Ae]:Te,[ve]:[Le,"ap-south-1"]}],endpoint:Ge,[Ie]:Oe},{conditions:[{[Ae]:Te,[ve]:[Le,"ap-southeast-1"]}],endpoint:Ge,[Ie]:Oe},{conditions:[{[Ae]:Te,[ve]:[Le,"ap-southeast-2"]}],endpoint:Ge,[Ie]:Oe},Be,{conditions:[{[Ae]:Te,[ve]:[Le,"ca-central-1"]}],endpoint:Ge,[Ie]:Oe},{conditions:[{[Ae]:Te,[ve]:[Le,"eu-central-1"]}],endpoint:Ge,[Ie]:Oe},{conditions:[{[Ae]:Te,[ve]:[Le,"eu-north-1"]}],endpoint:Ge,[Ie]:Oe},{conditions:[{[Ae]:Te,[ve]:[Le,"eu-west-1"]}],endpoint:Ge,[Ie]:Oe},{conditions:[{[Ae]:Te,[ve]:[Le,"eu-west-2"]}],endpoint:Ge,[Ie]:Oe},{conditions:[{[Ae]:Te,[ve]:[Le,"eu-west-3"]}],endpoint:Ge,[Ie]:Oe},{conditions:[{[Ae]:Te,[ve]:[Le,"sa-east-1"]}],endpoint:Ge,[Ie]:Oe},{conditions:[{[Ae]:Te,[ve]:[Le,$e]}],endpoint:Ge,[Ie]:Oe},{conditions:[{[Ae]:Te,[ve]:[Le,"us-east-2"]}],endpoint:Ge,[Ie]:Oe},{conditions:[{[Ae]:Te,[ve]:[Le,"us-west-1"]}],endpoint:Ge,[Ie]:Oe},{conditions:[{[Ae]:Te,[ve]:[Le,"us-west-2"]}],endpoint:Ge,[Ie]:Oe},{endpoint:{url:je,properties:{authSchemes:[{name:De,signingName:"sts",signingRegion:"{Region}"}]},headers:Ve},[Ie]:Oe}],[Ie]:We},{conditions:et,rules:[{conditions:tt,error:"Invalid Configuration: FIPS and custom endpoint are not supported",[Ie]:ze},{conditions:nt,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",[Ie]:ze},{endpoint:{url:Fe,properties:Ve,headers:Ve},[Ie]:Oe}],[Ie]:We},{conditions:[_e],rules:[{conditions:[He],rules:[{conditions:[Je,Qe],rules:[{conditions:[{[Ae]:ke,[ve]:[Re,Xe]},Ze],rules:[{endpoint:{url:"https://sts-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Ve,headers:Ve},[Ie]:Oe}],[Ie]:We},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",[Ie]:ze}],[Ie]:We},{conditions:tt,rules:[{conditions:[{[Ae]:ke,[ve]:[Xe,Re]}],rules:[{conditions:[{[Ae]:Te,[ve]:[{[Ae]:Ke,[ve]:[Ye,"name"]},"aws-us-gov"]}],endpoint:{url:"https://sts.{Region}.amazonaws.com",properties:Ve,headers:Ve},[Ie]:Oe},{endpoint:{url:"https://sts-fips.{Region}.{PartitionResult#dnsSuffix}",properties:Ve,headers:Ve},[Ie]:Oe}],[Ie]:We},{error:"FIPS is enabled but this partition does not support FIPS",[Ie]:ze}],[Ie]:We},{conditions:nt,rules:[{conditions:[Ze],rules:[{endpoint:{url:"https://sts.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Ve,headers:Ve},[Ie]:Oe}],[Ie]:We},{error:"DualStack is enabled but this partition does not support DualStack",[Ie]:ze}],[Ie]:We},Be,{endpoint:{url:je,properties:Ve,headers:Ve},[Ie]:Oe}],[Ie]:We}],[Ie]:We},{error:"Invalid Configuration: Missing Region",[Ie]:ze}]},st=new o({size:50,params:["Endpoint","Region","UseDualStack","UseFIPS","UseGlobalEndpoint"]}),rt=(e,t={})=>st.get(e,(()=>i(ot,{endpointParams:e,logger:t.logger})));s.aws=r;const it=e=>{g(process.version);const t=D(e),n=()=>t().then($),o=(e=>({apiVersion:"2011-06-15",base64Decoder:e?.base64Decoder??a,base64Encoder:e?.base64Encoder??c,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??rt,extensions:e?.extensions??[],httpAuthSchemeProvider:e?.httpAuthSchemeProvider??Pe,httpAuthSchemes:e?.httpAuthSchemes??[{schemeId:"aws.auth#sigv4",identityProvider:e=>e.getIdentityProvider("aws.auth#sigv4"),signer:new l},{schemeId:"smithy.api#noAuth",identityProvider:e=>e.getIdentityProvider("smithy.api#noAuth")||(async()=>({})),signer:new d}],logger:e?.logger??new u,serviceId:e?.serviceId??"STS",urlParser:e?.urlParser??p,utf8Decoder:e?.utf8Decoder??m,utf8Encoder:e?.utf8Encoder??h}))(e);f(process.version);const s={profile:e?.profile};return{...o,...e,runtime:"node",defaultsMode:t,bodyLengthChecker:e?.bodyLengthChecker??y,defaultUserAgentProvider:e?.defaultUserAgentProvider??S({serviceId:o.serviceId,clientVersion:ye.version}),httpAuthSchemes:e?.httpAuthSchemes??[{schemeId:"aws.auth#sigv4",identityProvider:t=>t.getIdentityProvider("aws.auth#sigv4")||(async t=>await e.credentialDefaultProvider(t?.__config||{})()),signer:new l},{schemeId:"smithy.api#noAuth",identityProvider:e=>e.getIdentityProvider("smithy.api#noAuth")||(async()=>({})),signer:new d}],maxAttempts:e?.maxAttempts??P(E,e),region:e?.region??P(b,{...w,...s}),requestHandler:I.create(e?.requestHandler??n),retryMode:e?.retryMode??P({...A,default:async()=>(await n()).retryMode||v},e),sha256:e?.sha256??C.bind(null,"sha256"),streamCollector:e?.streamCollector??x,useDualstackEndpoint:e?.useDualstackEndpoint??P(R,s),useFipsEndpoint:e?.useFipsEndpoint??P(k,s),userAgentAppId:e?.userAgentAppId??P(T,s)}},at=e=>{const t=e.httpAuthSchemes;let n=e.httpAuthSchemeProvider,o=e.credentials;return{setHttpAuthScheme(e){const n=t.findIndex((t=>t.schemeId===e.schemeId));-1===n?t.push(e):t.splice(n,1,e)},httpAuthSchemes:()=>t,setHttpAuthSchemeProvider(e){n=e},httpAuthSchemeProvider:()=>n,setCredentials(e){o=e},credentials:()=>o}};class ct extends q{config;constructor(...[e]){const t=it(e||{}),n=(o=t,{...o,useDualstackEndpoint:o.useDualstackEndpoint??!1,useFipsEndpoint:o.useFipsEndpoint??!1,useGlobalEndpoint:o.useGlobalEndpoint??!1,defaultSigningName:"sts"});var o;const s=F(n),r=_(s),i=L(r),a=Z(i),c=H(a),l=((e,t)=>{const n={...U(e),...O(e),...j(e),...at(e)};return t.forEach((e=>e.configure(n))),{...e,...W(n),...z(n),...K(n),...(o=n,{httpAuthSchemes:o.httpAuthSchemes(),httpAuthSchemeProvider:o.httpAuthSchemeProvider(),credentials:o.credentials()})};var o})(Ee(c),e?.extensions||[]);super(l),this.config=l,this.middlewareStack.use(M(this.config)),this.middlewareStack.use(N(this.config)),this.middlewareStack.use(G(this.config)),this.middlewareStack.use(V(this.config)),this.middlewareStack.use(B(this.config)),this.middlewareStack.use(J(this.config)),this.middlewareStack.use(Q(this.config,{httpAuthSchemeParametersProvider:Se,identityProviderConfigProvider:async e=>new X({"aws.auth#sigv4":e.credentials})})),this.middlewareStack.use(Y(this.config))}destroy(){super.destroy()}}class lt extends ee{constructor(e){super(e),Object.setPrototypeOf(this,lt.prototype)}}const dt=e=>({...e,...e.SecretAccessKey&&{SecretAccessKey:te}}),ut=e=>({...e,...e.Credentials&&{Credentials:dt(e.Credentials)}});class pt extends lt{name="ExpiredTokenException";$fault="client";constructor(e){super({name:"ExpiredTokenException",$fault:"client",...e}),Object.setPrototypeOf(this,pt.prototype)}}class mt extends lt{name="MalformedPolicyDocumentException";$fault="client";constructor(e){super({name:"MalformedPolicyDocumentException",$fault:"client",...e}),Object.setPrototypeOf(this,mt.prototype)}}class ht extends lt{name="PackedPolicyTooLargeException";$fault="client";constructor(e){super({name:"PackedPolicyTooLargeException",$fault:"client",...e}),Object.setPrototypeOf(this,ht.prototype)}}class gt extends lt{name="RegionDisabledException";$fault="client";constructor(e){super({name:"RegionDisabledException",$fault:"client",...e}),Object.setPrototypeOf(this,gt.prototype)}}class ft extends lt{name="IDPRejectedClaimException";$fault="client";constructor(e){super({name:"IDPRejectedClaimException",$fault:"client",...e}),Object.setPrototypeOf(this,ft.prototype)}}class yt extends lt{name="InvalidIdentityTokenException";$fault="client";constructor(e){super({name:"InvalidIdentityTokenException",$fault:"client",...e}),Object.setPrototypeOf(this,yt.prototype)}}const St=e=>({...e,...e.WebIdentityToken&&{WebIdentityToken:te}}),Pt=e=>({...e,...e.Credentials&&{Credentials:dt(e.Credentials)}});class Et extends lt{name="IDPCommunicationErrorException";$fault="client";constructor(e){super({name:"IDPCommunicationErrorException",$fault:"client",...e}),Object.setPrototypeOf(this,Et.prototype)}}const wt=async(e,t)=>{const n=nn;let o;return o=_n({...Ot(e),[sn]:an,[zn]:on}),tn(t,n,"/",void 0,o)},bt=async(e,t)=>{const n=nn;let o;return o=_n({...jt(e),[sn]:dn,[zn]:on}),tn(t,n,"/",void 0,o)},It=async(e,t)=>{if(e.statusCode>=300)return vt(e,t);const n=await ne(e.body,t);let o={};o=Ht(n.AssumeRoleResult);return{$metadata:Zt(e),...o}},At=async(e,t)=>{if(e.statusCode>=300)return vt(e,t);const n=await ne(e.body,t);let o={};o=Mt(n.AssumeRoleWithWebIdentityResult);return{$metadata:Zt(e),...o}},vt=async(e,t)=>{const n={...e,body:await oe(e.body,t)},o=Ln(e,n.body);switch(o){case"ExpiredTokenException":case"com.amazonaws.sts#ExpiredTokenException":throw await Ct(n);case"MalformedPolicyDocument":case"com.amazonaws.sts#MalformedPolicyDocumentException":throw await Tt(n);case"PackedPolicyTooLarge":case"com.amazonaws.sts#PackedPolicyTooLargeException":throw await Dt(n);case"RegionDisabledException":case"com.amazonaws.sts#RegionDisabledException":throw await $t(n);case"IDPCommunicationError":case"com.amazonaws.sts#IDPCommunicationErrorException":throw await xt(n);case"IDPRejectedClaim":case"com.amazonaws.sts#IDPRejectedClaimException":throw await Rt(n);case"InvalidIdentityToken":case"com.amazonaws.sts#InvalidIdentityTokenException":throw await kt(n);default:const t=n.body;return en({output:e,parsedBody:t.Error,errorCode:o})}},Ct=async(e,t)=>{const n=e.body,o=Gt(n.Error),s=new pt({$metadata:Zt(e),...o});return se(s,n)},xt=async(e,t)=>{const n=e.body,o=Vt(n.Error),s=new Et({$metadata:Zt(e),...o});return se(s,n)},Rt=async(e,t)=>{const n=e.body,o=Bt(n.Error),s=new ft({$metadata:Zt(e),...o});return se(s,n)},kt=async(e,t)=>{const n=e.body,o=Jt(n.Error),s=new yt({$metadata:Zt(e),...o});return se(s,n)},Tt=async(e,t)=>{const n=e.body,o=Qt(n.Error),s=new mt({$metadata:Zt(e),...o});return se(s,n)},Dt=async(e,t)=>{const n=e.body,o=Xt(n.Error),s=new ht({$metadata:Zt(e),...o});return se(s,n)},$t=async(e,t)=>{const n=e.body,o=Yt(n.Error),s=new gt({$metadata:Zt(e),...o});return se(s,n)},Ot=(e,t)=>{const n={};if(null!=e[Cn]&&(n[Cn]=e[Cn]),null!=e[xn]&&(n[xn]=e[xn]),null!=e[En]){const t=Wt(e[En]);0===e[En]?.length&&(n.PolicyArns=[]),Object.entries(t).forEach((([e,t])=>{n[`PolicyArns.${e}`]=t}))}if(null!=e[Pn]&&(n[Pn]=e[Pn]),null!=e[gn]&&(n[gn]=e[gn]),null!=e[On]){const t=_t(e[On]);0===e[On]?.length&&(n.Tags=[]),Object.entries(t).forEach((([e,t])=>{n[`Tags.${e}`]=t}))}if(null!=e[Wn]){const t=Ft(e[Wn]);0===e[Wn]?.length&&(n.TransitiveTagKeys=[]),Object.entries(t).forEach((([e,t])=>{n[`TransitiveTagKeys.${e}`]=t}))}if(null!=e[yn]&&(n[yn]=e[yn]),null!=e[Dn]&&(n[Dn]=e[Dn]),null!=e[jn]&&(n[jn]=e[jn]),null!=e[Tn]&&(n[Tn]=e[Tn]),null!=e[bn]){const t=Ut(e[bn]);0===e[bn]?.length&&(n.ProvidedContexts=[]),Object.entries(t).forEach((([e,t])=>{n[`ProvidedContexts.${e}`]=t}))}return n},jt=(e,t)=>{const n={};if(null!=e[Cn]&&(n[Cn]=e[Cn]),null!=e[xn]&&(n[xn]=e[xn]),null!=e[Un]&&(n[Un]=e[Un]),null!=e[In]&&(n[In]=e[In]),null!=e[En]){const t=Wt(e[En]);0===e[En]?.length&&(n.PolicyArns=[]),Object.entries(t).forEach((([e,t])=>{n[`PolicyArns.${e}`]=t}))}return null!=e[Pn]&&(n[Pn]=e[Pn]),null!=e[gn]&&(n[gn]=e[gn]),n},Wt=(e,t)=>{const n={};let o=1;for(const t of e){if(null===t)continue;const e=zt(t);Object.entries(e).forEach((([e,t])=>{n[`member.${o}.${e}`]=t})),o++}return n},zt=(e,t)=>{const n={};return null!=e[qn]&&(n[qn]=e[qn]),n},Kt=(e,t)=>{const n={};return null!=e[wn]&&(n[wn]=e[wn]),null!=e[hn]&&(n[hn]=e[hn]),n},Ut=(e,t)=>{const n={};let o=1;for(const t of e){if(null===t)continue;const e=Kt(t);Object.entries(e).forEach((([e,t])=>{n[`member.${o}.${e}`]=t})),o++}return n},qt=(e,t)=>{const n={};return null!=e[Sn]&&(n[Sn]=e[Sn]),null!=e[Kn]&&(n[Kn]=e[Kn]),n},Ft=(e,t)=>{const n={};let o=1;for(const t of e)null!==t&&(n[`member.${o}`]=t,o++);return n},_t=(e,t)=>{const n={};let o=1;for(const t of e){if(null===t)continue;const e=qt(t);Object.entries(e).forEach((([e,t])=>{n[`member.${o}.${e}`]=t})),o++}return n},Lt=(e,t)=>{const n={};return null!=e[cn]&&(n[cn]=ie(e[cn])),null!=e[un]&&(n[un]=ie(e[un])),n},Ht=(e,t)=>{const n={};return null!=e[mn]&&(n[mn]=Nt(e[mn])),null!=e[ln]&&(n[ln]=Lt(e[ln])),null!=e[An]&&(n[An]=re(e[An])),null!=e[Tn]&&(n[Tn]=ie(e[Tn])),n},Mt=(e,t)=>{const n={};return null!=e[mn]&&(n[mn]=Nt(e[mn])),null!=e[kn]&&(n[kn]=ie(e[kn])),null!=e[ln]&&(n[ln]=Lt(e[ln])),null!=e[An]&&(n[An]=re(e[An])),null!=e[vn]&&(n[vn]=ie(e[vn])),null!=e[pn]&&(n[pn]=ie(e[pn])),null!=e[Tn]&&(n[Tn]=ie(e[Tn])),n},Nt=(e,t)=>{const n={};return null!=e[rn]&&(n[rn]=ie(e[rn])),null!=e[Rn]&&(n[Rn]=ie(e[Rn])),null!=e[$n]&&(n[$n]=ie(e[$n])),null!=e[fn]&&(n[fn]=ae(ce(e[fn]))),n},Gt=(e,t)=>{const n={};return null!=e[Fn]&&(n[Fn]=ie(e[Fn])),n},Vt=(e,t)=>{const n={};return null!=e[Fn]&&(n[Fn]=ie(e[Fn])),n},Bt=(e,t)=>{const n={};return null!=e[Fn]&&(n[Fn]=ie(e[Fn])),n},Jt=(e,t)=>{const n={};return null!=e[Fn]&&(n[Fn]=ie(e[Fn])),n},Qt=(e,t)=>{const n={};return null!=e[Fn]&&(n[Fn]=ie(e[Fn])),n},Xt=(e,t)=>{const n={};return null!=e[Fn]&&(n[Fn]=ie(e[Fn])),n},Yt=(e,t)=>{const n={};return null!=e[Fn]&&(n[Fn]=ie(e[Fn])),n},Zt=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),en=le(lt),tn=async(e,t,n,o,s)=>{const{hostname:r,protocol:i="https",port:a,path:c}=await e.endpoint(),l={protocol:i,hostname:r,port:a,method:"POST",path:c.endsWith("/")?c.slice(0,-1)+n:c+n,headers:t};return void 0!==o&&(l.hostname=o),void 0!==s&&(l.body=s),new de(l)},nn={"content-type":"application/x-www-form-urlencoded"},on="2011-06-15",sn="Action",rn="AccessKeyId",an="AssumeRole",cn="AssumedRoleId",ln="AssumedRoleUser",dn="AssumeRoleWithWebIdentity",un="Arn",pn="Audience",mn="Credentials",hn="ContextAssertion",gn="DurationSeconds",fn="Expiration",yn="ExternalId",Sn="Key",Pn="Policy",En="PolicyArns",wn="ProviderArn",bn="ProvidedContexts",In="ProviderId",An="PackedPolicySize",vn="Provider",Cn="RoleArn",xn="RoleSessionName",Rn="SecretAccessKey",kn="SubjectFromWebIdentityToken",Tn="SourceIdentity",Dn="SerialNumber",$n="SessionToken",On="Tags",jn="TokenCode",Wn="TransitiveTagKeys",zn="Version",Kn="Value",Un="WebIdentityToken",qn="arn",Fn="message",_n=e=>Object.entries(e).map((([e,t])=>ue(e)+"="+ue(t))).join("&"),Ln=(e,t)=>void 0!==t.Error?.Code?t.Error.Code:404==e.statusCode?"NotFound":void 0;class Hn extends(pe.classBuilder().ep(we).m((function(e,t,n,o){return[me(n,this.serialize,this.deserialize),he(n,e.getEndpointParameterInstructions())]})).s("AWSSecurityTokenServiceV20110615","AssumeRole",{}).n("STSClient","AssumeRoleCommand").f(void 0,ut).ser(wt).de(It).build()){}class Mn extends(pe.classBuilder().ep(we).m((function(e,t,n,o){return[me(n,this.serialize,this.deserialize),he(n,e.getEndpointParameterInstructions())]})).s("AWSSecurityTokenServiceV20110615","AssumeRoleWithWebIdentity",{}).n("STSClient","AssumeRoleWithWebIdentityCommand").f(St,Pt).ser(bt).de(At).build()){}const Nn={AssumeRoleCommand:Hn,AssumeRoleWithWebIdentityCommand:Mn};class Gn extends ct{}ge(Nn,Gn);const Vn="us-east-1",Bn=e=>{if("string"==typeof e?.Arn){const t=e.Arn.split(":");if(t.length>4&&""!==t[4])return t[4]}},Jn=async(e,t,n)=>{const o="function"==typeof e?await e():e,s="function"==typeof t?await t():t;return n?.debug?.("@aws-sdk/client-sts::resolveRegion","accepting first of:",`${o} (provider)`,`${s} (parent client)`,`${Vn} (STS default)`),o??s??Vn},Qn=e=>"h2"===e?.metadata?.handlerProtocol,Xn=(e,t)=>t?class extends e{constructor(e){super(e);for(const e of t)this.middlewareStack.use(e)}}:e,Yn=(e={},t)=>((e,t)=>{let n,o;return async(s,r)=>{if(o=s,!n){const{logger:s=e?.parentClientConfig?.logger,region:r,requestHandler:i=e?.parentClientConfig?.requestHandler,credentialProviderLogger:a}=e,c=await Jn(r,e?.parentClientConfig?.region,a),l=!Qn(i);n=new t({profile:e?.parentClientConfig?.profile,credentialDefaultProvider:()=>async()=>o,region:c,requestHandler:l?i:void 0,logger:s})}const{Credentials:i,AssumedRoleUser:a}=await n.send(new Hn(r));if(!i||!i.AccessKeyId||!i.SecretAccessKey)throw new Error(`Invalid response from STS.assumeRole call with role ${r.RoleArn}`);const c=Bn(a),l={accessKeyId:i.AccessKeyId,secretAccessKey:i.SecretAccessKey,sessionToken:i.SessionToken,expiration:i.Expiration,...i.CredentialScope&&{credentialScope:i.CredentialScope},...c&&{accountId:c}};return fe(l,"CREDENTIALS_STS_ASSUME_ROLE","i"),l}})(e,Xn(ct,t)),Zn=(e={},t)=>((e,t)=>{let n;return async o=>{if(!n){const{logger:o=e?.parentClientConfig?.logger,region:s,requestHandler:r=e?.parentClientConfig?.requestHandler,credentialProviderLogger:i}=e,a=await Jn(s,e?.parentClientConfig?.region,i),c=!Qn(r);n=new t({profile:e?.parentClientConfig?.profile,region:a,requestHandler:c?r:void 0,logger:o})}const{Credentials:s,AssumedRoleUser:r}=await n.send(new Mn(o));if(!s||!s.AccessKeyId||!s.SecretAccessKey)throw new Error(`Invalid response from STS.assumeRoleWithWebIdentity call with role ${o.RoleArn}`);const i=Bn(r),a={accessKeyId:s.AccessKeyId,secretAccessKey:s.SecretAccessKey,sessionToken:s.SessionToken,expiration:s.Expiration,...s.CredentialScope&&{credentialScope:s.CredentialScope},...i&&{accountId:i}};return i&&fe(a,"RESOLVED_ACCOUNT_ID","T"),fe(a,"CREDENTIALS_STS_ASSUME_ROLE_WEB_ID","k"),a}})(e,Xn(ct,t)),eo=e=>t=>e({roleAssumer:Yn(t),roleAssumerWithWebIdentity:Zn(t),...t});export{Hn as AssumeRoleCommand,ut as AssumeRoleResponseFilterSensitiveLog,Mn as AssumeRoleWithWebIdentityCommand,St as AssumeRoleWithWebIdentityRequestFilterSensitiveLog,Pt as AssumeRoleWithWebIdentityResponseFilterSensitiveLog,dt as CredentialsFilterSensitiveLog,pt as ExpiredTokenException,Et as IDPCommunicationErrorException,ft as IDPRejectedClaimException,yt as InvalidIdentityTokenException,mt as MalformedPolicyDocumentException,ht as PackedPolicyTooLargeException,gt as RegionDisabledException,Gn as STS,ct as STSClient,lt as STSServiceException,eo as decorateDefaultCredentialProvider,Yn as getDefaultRoleAssumer,Zn as getDefaultRoleAssumerWithWebIdentity};
//# sourceMappingURL=index.min8.mjs.map
