import"os";import"path";import"crypto";import"fs";import{getSmithyContext as e,normalizeProvider as t,resolveAwsSdkSigV4Config as s,EndpointCache as o,resolveEndpoint as n,customEndpointFunctions as r,awsEndpointFunctions as i,fromBase64 as a,toBase64 as c,AwsSdkSigV4Signer as d,NoAuthSigner as u,NoOpLogger as p,parseUrl as l,fromUtf8 as h,toUtf8 as m,emitWarningIfUnsupportedVersion as y,emitWarningIfUnsupportedVersion$1 as g,calculateBodyLength as f,createDefaultUserAgentProvider as S,loadConfig as b,NODE_MAX_ATTEMPT_CONFIG_OPTIONS as P,NODE_REGION_CONFIG_FILE_OPTIONS as w,NODE_REGION_CONFIG_OPTIONS as x,NodeHttpHandler as v,NODE_RETRY_MODE_CONFIG_OPTIONS as E,DEFAULT_RETRY_MODE as I,Hash as k,streamCollector as R,NODE_USE_DUALSTACK_ENDPOINT_CONFIG_OPTIONS as A,NODE_USE_FIPS_ENDPOINT_CONFIG_OPTIONS as C,NODE_APP_ID_CONFIG_OPTIONS as D,resolveDefaultsModeConfig as q,loadConfigsForDefaultMode as z,getDefaultExtensionConfiguration as F,getHttpHandlerExtensionConfiguration as O,resolveAwsRegionExtensionConfiguration as U,resolveDefaultRuntimeConfig as $,resolveHttpHandlerRuntimeConfig as j,getAwsRegionExtensionConfiguration as T,Client as M,resolveUserAgentConfig as N,resolveRetryConfig as H,resolveRegionConfig as L,resolveEndpointConfig as B,getUserAgentPlugin as G,getRetryPlugin as _,getContentLengthPlugin as K,getHostHeaderPlugin as V,getLoggerPlugin as W,getRecursionDetectionPlugin as J,getHttpAuthSchemeEndpointRuleSetPlugin as Q,DefaultIdentityProviderConfig as X,getHttpSigningPlugin as Y,resolveHostHeaderConfig as Z,ServiceException as ee,SENSITIVE_STRING as te,requestBuilder as se,map as oe,isSerializableHeaderValue as ne,expectNonNull as re,expectObject as ie,parseJsonBody as ae,take as ce,parseJsonErrorBody as de,loadRestJsonErrorCode as ue,withBaseException as pe,decorateServiceException as le,_json as he,expectString as me,Command as ye,getSerdePlugin as ge,getEndpointPlugin as fe}from"./core.min.mjs";import"buffer";import"stream";import"http";import"https";import"http2";import"zlib";import"process";const Se=async(s,o,n)=>({operation:e(o).operation,region:await t(s.region)()||(()=>{throw new Error("expected `region` to be configured for `aws.auth#sigv4`")})()});const be=e=>{const t=[];switch(e.operation){case"GetRoleCredentials":case"ListAccountRoles":case"ListAccounts":case"Logout":t.push({schemeId:"smithy.api#noAuth"});break;default:t.push(function(e){return{schemeId:"aws.auth#sigv4",signingProperties:{name:"awsssoportal",region:e.region},propertiesExtractor:(e,t)=>({signingProperties:{config:e,context:t}})}}(e))}return t},Pe={UseFIPS:{type:"builtInParams",name:"useFipsEndpoint"},Endpoint:{type:"builtInParams",name:"endpoint"},Region:{type:"builtInParams",name:"region"},UseDualStack:{type:"builtInParams",name:"useDualstackEndpoint"}};var we="3.744.0";const xe="required",ve="fn",Ee="argv",Ie="ref",ke=!0,Re="isSet",Ae="booleanEquals",Ce="error",De="endpoint",qe="tree",ze="PartitionResult",Fe="getAttr",Oe={[xe]:!1,type:"String"},Ue={[xe]:!0,default:!1,type:"Boolean"},$e={[Ie]:"Endpoint"},je={[ve]:Ae,[Ee]:[{[Ie]:"UseFIPS"},!0]},Te={[ve]:Ae,[Ee]:[{[Ie]:"UseDualStack"},!0]},Me={},Ne={[ve]:Fe,[Ee]:[{[Ie]:ze},"supportsFIPS"]},He={[Ie]:ze},Le={[ve]:Ae,[Ee]:[!0,{[ve]:Fe,[Ee]:[He,"supportsDualStack"]}]},Be=[je],Ge=[Te],_e=[{[Ie]:"Region"}],Ke={version:"1.0",parameters:{Region:Oe,UseDualStack:Ue,UseFIPS:Ue,Endpoint:Oe},rules:[{conditions:[{[ve]:Re,[Ee]:[$e]}],rules:[{conditions:Be,error:"Invalid Configuration: FIPS and custom endpoint are not supported",type:Ce},{conditions:Ge,error:"Invalid Configuration: Dualstack and custom endpoint are not supported",type:Ce},{endpoint:{url:$e,properties:Me,headers:Me},type:De}],type:qe},{conditions:[{[ve]:Re,[Ee]:_e}],rules:[{conditions:[{[ve]:"aws.partition",[Ee]:_e,assign:ze}],rules:[{conditions:[je,Te],rules:[{conditions:[{[ve]:Ae,[Ee]:[ke,Ne]},Le],rules:[{endpoint:{url:"https://portal.sso-fips.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Me,headers:Me},type:De}],type:qe},{error:"FIPS and DualStack are enabled, but this partition does not support one or both",type:Ce}],type:qe},{conditions:Be,rules:[{conditions:[{[ve]:Ae,[Ee]:[Ne,ke]}],rules:[{conditions:[{[ve]:"stringEquals",[Ee]:[{[ve]:Fe,[Ee]:[He,"name"]},"aws-us-gov"]}],endpoint:{url:"https://portal.sso.{Region}.amazonaws.com",properties:Me,headers:Me},type:De},{endpoint:{url:"https://portal.sso-fips.{Region}.{PartitionResult#dnsSuffix}",properties:Me,headers:Me},type:De}],type:qe},{error:"FIPS is enabled but this partition does not support FIPS",type:Ce}],type:qe},{conditions:Ge,rules:[{conditions:[Le],rules:[{endpoint:{url:"https://portal.sso.{Region}.{PartitionResult#dualStackDnsSuffix}",properties:Me,headers:Me},type:De}],type:qe},{error:"DualStack is enabled but this partition does not support DualStack",type:Ce}],type:qe},{endpoint:{url:"https://portal.sso.{Region}.{PartitionResult#dnsSuffix}",properties:Me,headers:Me},type:De}],type:qe}],type:qe},{error:"Invalid Configuration: Missing Region",type:Ce}]},Ve=new o({size:50,params:["Endpoint","Region","UseDualStack","UseFIPS"]}),We=(e,t={})=>Ve.get(e,(()=>n(Ke,{endpointParams:e,logger:t.logger})));r.aws=i;const Je=e=>{y(process.version);const t=q(e),s=()=>t().then(z),o=(e=>({apiVersion:"2019-06-10",base64Decoder:e?.base64Decoder??a,base64Encoder:e?.base64Encoder??c,disableHostPrefix:e?.disableHostPrefix??!1,endpointProvider:e?.endpointProvider??We,extensions:e?.extensions??[],httpAuthSchemeProvider:e?.httpAuthSchemeProvider??be,httpAuthSchemes:e?.httpAuthSchemes??[{schemeId:"aws.auth#sigv4",identityProvider:e=>e.getIdentityProvider("aws.auth#sigv4"),signer:new d},{schemeId:"smithy.api#noAuth",identityProvider:e=>e.getIdentityProvider("smithy.api#noAuth")||(async()=>({})),signer:new u}],logger:e?.logger??new p,serviceId:e?.serviceId??"SSO",urlParser:e?.urlParser??l,utf8Decoder:e?.utf8Decoder??h,utf8Encoder:e?.utf8Encoder??m}))(e);g(process.version);const n={profile:e?.profile};return{...o,...e,runtime:"node",defaultsMode:t,bodyLengthChecker:e?.bodyLengthChecker??f,defaultUserAgentProvider:e?.defaultUserAgentProvider??S({serviceId:o.serviceId,clientVersion:we}),maxAttempts:e?.maxAttempts??b(P,e),region:e?.region??b(x,{...w,...n}),requestHandler:v.create(e?.requestHandler??s),retryMode:e?.retryMode??b({...E,default:async()=>(await s()).retryMode||I},e),sha256:e?.sha256??k.bind(null,"sha256"),streamCollector:e?.streamCollector??R,useDualstackEndpoint:e?.useDualstackEndpoint??b(A,n),useFipsEndpoint:e?.useFipsEndpoint??b(C,n),userAgentAppId:e?.userAgentAppId??b(D,n)}},Qe=e=>{const t=e.httpAuthSchemes;let s=e.httpAuthSchemeProvider,o=e.credentials;return{setHttpAuthScheme(e){const s=t.findIndex((t=>t.schemeId===e.schemeId));-1===s?t.push(e):t.splice(s,1,e)},httpAuthSchemes:()=>t,setHttpAuthSchemeProvider(e){s=e},httpAuthSchemeProvider:()=>s,setCredentials(e){o=e},credentials:()=>o}};class Xe extends M{config;constructor(...[e]){const t=Je(e||{}),o=(n=t,{...n,useDualstackEndpoint:n.useDualstackEndpoint??!1,useFipsEndpoint:n.useFipsEndpoint??!1,defaultSigningName:"awsssoportal"});var n;const r=N(o),i=H(r),a=L(i),c=Z(a),d=B(c);const u=((e,t)=>{const s={...T(e),...F(e),...O(e),...Qe(e)};return t.forEach((e=>e.configure(s))),{...e,...U(s),...$(s),...j(s),...(o=s,{httpAuthSchemes:o.httpAuthSchemes(),httpAuthSchemeProvider:o.httpAuthSchemeProvider(),credentials:o.credentials()})};var o})({...s(d)},e?.extensions||[]);super(u),this.config=u,this.middlewareStack.use(G(this.config)),this.middlewareStack.use(_(this.config)),this.middlewareStack.use(K(this.config)),this.middlewareStack.use(V(this.config)),this.middlewareStack.use(W(this.config)),this.middlewareStack.use(J(this.config)),this.middlewareStack.use(Q(this.config,{httpAuthSchemeParametersProvider:Se,identityProviderConfigProvider:async e=>new X({"aws.auth#sigv4":e.credentials})})),this.middlewareStack.use(Y(this.config))}destroy(){super.destroy()}}class Ye extends ee{constructor(e){super(e),Object.setPrototypeOf(this,Ye.prototype)}}class Ze extends Ye{name="InvalidRequestException";$fault="client";constructor(e){super({name:"InvalidRequestException",$fault:"client",...e}),Object.setPrototypeOf(this,Ze.prototype)}}class et extends Ye{name="ResourceNotFoundException";$fault="client";constructor(e){super({name:"ResourceNotFoundException",$fault:"client",...e}),Object.setPrototypeOf(this,et.prototype)}}class tt extends Ye{name="TooManyRequestsException";$fault="client";constructor(e){super({name:"TooManyRequestsException",$fault:"client",...e}),Object.setPrototypeOf(this,tt.prototype)}}class st extends Ye{name="UnauthorizedException";$fault="client";constructor(e){super({name:"UnauthorizedException",$fault:"client",...e}),Object.setPrototypeOf(this,st.prototype)}}const ot=e=>({...e,...e.accessToken&&{accessToken:te}}),nt=e=>({...e,...e.secretAccessKey&&{secretAccessKey:te},...e.sessionToken&&{sessionToken:te}}),rt=e=>({...e,...e.roleCredentials&&{roleCredentials:nt(e.roleCredentials)}}),it=async(e,t)=>{const s=se(e,t),o=oe({},ne,{[Pt]:e[gt]});s.bp("/federation/credentials");const n=oe({[bt]:[,re(e[St],"roleName")],[ft]:[,re(e[yt],"accountId")]});return s.m("GET").h(o).q(n).b(undefined),s.build()},at=async(e,t)=>{if(200!==e.statusCode&&e.statusCode>=300)return ct(e,t);const s=oe({$metadata:mt(e)}),o=re(ie(await ae(e.body,t)),"body"),n=ce(o,{roleCredentials:he});return Object.assign(s,n),s},ct=async(e,t)=>{const s={...e,body:await de(e.body,t)},o=ue(e,s.body);switch(o){case"InvalidRequestException":case"com.amazonaws.sso#InvalidRequestException":throw await ut(s);case"ResourceNotFoundException":case"com.amazonaws.sso#ResourceNotFoundException":throw await pt(s);case"TooManyRequestsException":case"com.amazonaws.sso#TooManyRequestsException":throw await lt(s);case"UnauthorizedException":case"com.amazonaws.sso#UnauthorizedException":throw await ht(s);default:const t=s.body;return dt({output:e,parsedBody:t,errorCode:o})}},dt=pe(Ye),ut=async(e,t)=>{const s=oe({}),o=e.body,n=ce(o,{message:me});Object.assign(s,n);const r=new Ze({$metadata:mt(e),...s});return le(r,e.body)},pt=async(e,t)=>{const s=oe({}),o=e.body,n=ce(o,{message:me});Object.assign(s,n);const r=new et({$metadata:mt(e),...s});return le(r,e.body)},lt=async(e,t)=>{const s=oe({}),o=e.body,n=ce(o,{message:me});Object.assign(s,n);const r=new tt({$metadata:mt(e),...s});return le(r,e.body)},ht=async(e,t)=>{const s=oe({}),o=e.body,n=ce(o,{message:me});Object.assign(s,n);const r=new st({$metadata:mt(e),...s});return le(r,e.body)},mt=e=>({httpStatusCode:e.statusCode,requestId:e.headers["x-amzn-requestid"]??e.headers["x-amzn-request-id"]??e.headers["x-amz-request-id"],extendedRequestId:e.headers["x-amz-id-2"],cfId:e.headers["x-amz-cf-id"]}),yt="accountId",gt="accessToken",ft="account_id",St="roleName",bt="role_name",Pt="x-amz-sso_bearer_token";class wt extends(ye.classBuilder().ep(Pe).m((function(e,t,s,o){return[ge(s,this.serialize,this.deserialize),fe(s,e.getEndpointParameterInstructions())]})).s("SWBPortalService","GetRoleCredentials",{}).n("SSOClient","GetRoleCredentialsCommand").f(ot,rt).ser(it).de(at).build()){}export{wt as GetRoleCredentialsCommand,Xe as SSOClient};
//# sourceMappingURL=loadSso.min.mjs.map
