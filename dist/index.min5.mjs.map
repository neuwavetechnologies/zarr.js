{"version":3,"file":"index.min5.mjs","sources":["../node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/httpRequest.js","../node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/ImdsCredentials.js","../node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/RemoteProviderInit.js","../node_modules/@smithy/credential-provider-imds/dist-es/remoteProvider/retry.js","../node_modules/@smithy/credential-provider-imds/dist-es/fromContainerMetadata.js","../node_modules/@smithy/credential-provider-imds/dist-es/error/InstanceMetadataV1FallbackError.js","../node_modules/@smithy/credential-provider-imds/dist-es/config/Endpoint.js","../node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointConfigOptions.js","../node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointMode.js","../node_modules/@smithy/credential-provider-imds/dist-es/config/EndpointModeConfigOptions.js","../node_modules/@smithy/credential-provider-imds/dist-es/utils/getInstanceMetadataEndpoint.js","../node_modules/@smithy/credential-provider-imds/dist-es/utils/getExtendedInstanceMetadataCredentials.js","../node_modules/@smithy/credential-provider-imds/dist-es/fromInstanceMetadata.js","../node_modules/@smithy/credential-provider-imds/dist-es/utils/staticStabilityProvider.js"],"sourcesContent":["import { ProviderError } from \"@smithy/property-provider\";\nimport { Buffer } from \"buffer\";\nimport { request } from \"http\";\nexport function httpRequest(options) {\n    return new Promise((resolve, reject) => {\n        const req = request({\n            method: \"GET\",\n            ...options,\n            hostname: options.hostname?.replace(/^\\[(.+)\\]$/, \"$1\"),\n        });\n        req.on(\"error\", (err) => {\n            reject(Object.assign(new ProviderError(\"Unable to connect to instance metadata service\"), err));\n            req.destroy();\n        });\n        req.on(\"timeout\", () => {\n            reject(new ProviderError(\"TimeoutError from instance metadata service\"));\n            req.destroy();\n        });\n        req.on(\"response\", (res) => {\n            const { statusCode = 400 } = res;\n            if (statusCode < 200 || 300 <= statusCode) {\n                reject(Object.assign(new ProviderError(\"Error response received from instance metadata service\"), { statusCode }));\n                req.destroy();\n            }\n            const chunks = [];\n            res.on(\"data\", (chunk) => {\n                chunks.push(chunk);\n            });\n            res.on(\"end\", () => {\n                resolve(Buffer.concat(chunks));\n                req.destroy();\n            });\n        });\n        req.end();\n    });\n}\n","export const isImdsCredentials = (arg) => Boolean(arg) &&\n    typeof arg === \"object\" &&\n    typeof arg.AccessKeyId === \"string\" &&\n    typeof arg.SecretAccessKey === \"string\" &&\n    typeof arg.Token === \"string\" &&\n    typeof arg.Expiration === \"string\";\nexport const fromImdsCredentials = (creds) => ({\n    accessKeyId: creds.AccessKeyId,\n    secretAccessKey: creds.SecretAccessKey,\n    sessionToken: creds.Token,\n    expiration: new Date(creds.Expiration),\n    ...(creds.AccountId && { accountId: creds.AccountId }),\n});\n","export const DEFAULT_TIMEOUT = 1000;\nexport const DEFAULT_MAX_RETRIES = 0;\nexport const providerConfigFromInit = ({ maxRetries = DEFAULT_MAX_RETRIES, timeout = DEFAULT_TIMEOUT, }) => ({ maxRetries, timeout });\n","export const retry = (toRetry, maxRetries) => {\n    let promise = toRetry();\n    for (let i = 0; i < maxRetries; i++) {\n        promise = promise.catch(toRetry);\n    }\n    return promise;\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { parse } from \"url\";\nimport { httpRequest } from \"./remoteProvider/httpRequest\";\nimport { fromImdsCredentials, isImdsCredentials } from \"./remoteProvider/ImdsCredentials\";\nimport { providerConfigFromInit } from \"./remoteProvider/RemoteProviderInit\";\nimport { retry } from \"./remoteProvider/retry\";\nexport const ENV_CMDS_FULL_URI = \"AWS_CONTAINER_CREDENTIALS_FULL_URI\";\nexport const ENV_CMDS_RELATIVE_URI = \"AWS_CONTAINER_CREDENTIALS_RELATIVE_URI\";\nexport const ENV_CMDS_AUTH_TOKEN = \"AWS_CONTAINER_AUTHORIZATION_TOKEN\";\nexport const fromContainerMetadata = (init = {}) => {\n    const { timeout, maxRetries } = providerConfigFromInit(init);\n    return () => retry(async () => {\n        const requestOptions = await getCmdsUri({ logger: init.logger });\n        const credsResponse = JSON.parse(await requestFromEcsImds(timeout, requestOptions));\n        if (!isImdsCredentials(credsResponse)) {\n            throw new CredentialsProviderError(\"Invalid response received from instance metadata service.\", {\n                logger: init.logger,\n            });\n        }\n        return fromImdsCredentials(credsResponse);\n    }, maxRetries);\n};\nconst requestFromEcsImds = async (timeout, options) => {\n    if (process.env[ENV_CMDS_AUTH_TOKEN]) {\n        options.headers = {\n            ...options.headers,\n            Authorization: process.env[ENV_CMDS_AUTH_TOKEN],\n        };\n    }\n    const buffer = await httpRequest({\n        ...options,\n        timeout,\n    });\n    return buffer.toString();\n};\nconst CMDS_IP = \"169.254.170.2\";\nconst GREENGRASS_HOSTS = {\n    localhost: true,\n    \"127.0.0.1\": true,\n};\nconst GREENGRASS_PROTOCOLS = {\n    \"http:\": true,\n    \"https:\": true,\n};\nconst getCmdsUri = async ({ logger }) => {\n    if (process.env[ENV_CMDS_RELATIVE_URI]) {\n        return {\n            hostname: CMDS_IP,\n            path: process.env[ENV_CMDS_RELATIVE_URI],\n        };\n    }\n    if (process.env[ENV_CMDS_FULL_URI]) {\n        const parsed = parse(process.env[ENV_CMDS_FULL_URI]);\n        if (!parsed.hostname || !(parsed.hostname in GREENGRASS_HOSTS)) {\n            throw new CredentialsProviderError(`${parsed.hostname} is not a valid container metadata service hostname`, {\n                tryNextLink: false,\n                logger,\n            });\n        }\n        if (!parsed.protocol || !(parsed.protocol in GREENGRASS_PROTOCOLS)) {\n            throw new CredentialsProviderError(`${parsed.protocol} is not a valid container metadata service protocol`, {\n                tryNextLink: false,\n                logger,\n            });\n        }\n        return {\n            ...parsed,\n            port: parsed.port ? parseInt(parsed.port, 10) : undefined,\n        };\n    }\n    throw new CredentialsProviderError(\"The container metadata credential provider cannot be used unless\" +\n        ` the ${ENV_CMDS_RELATIVE_URI} or ${ENV_CMDS_FULL_URI} environment` +\n        \" variable is set\", {\n        tryNextLink: false,\n        logger,\n    });\n};\n","import { CredentialsProviderError } from \"@smithy/property-provider\";\nexport class InstanceMetadataV1FallbackError extends CredentialsProviderError {\n    constructor(message, tryNextLink = true) {\n        super(message, tryNextLink);\n        this.tryNextLink = tryNextLink;\n        this.name = \"InstanceMetadataV1FallbackError\";\n        Object.setPrototypeOf(this, InstanceMetadataV1FallbackError.prototype);\n    }\n}\n","export var Endpoint;\n(function (Endpoint) {\n    Endpoint[\"IPv4\"] = \"http://169.254.169.254\";\n    Endpoint[\"IPv6\"] = \"http://[fd00:ec2::254]\";\n})(Endpoint || (Endpoint = {}));\n","export const ENV_ENDPOINT_NAME = \"AWS_EC2_METADATA_SERVICE_ENDPOINT\";\nexport const CONFIG_ENDPOINT_NAME = \"ec2_metadata_service_endpoint\";\nexport const ENDPOINT_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_ENDPOINT_NAME],\n    configFileSelector: (profile) => profile[CONFIG_ENDPOINT_NAME],\n    default: undefined,\n};\n","export var EndpointMode;\n(function (EndpointMode) {\n    EndpointMode[\"IPv4\"] = \"IPv4\";\n    EndpointMode[\"IPv6\"] = \"IPv6\";\n})(EndpointMode || (EndpointMode = {}));\n","import { EndpointMode } from \"./EndpointMode\";\nexport const ENV_ENDPOINT_MODE_NAME = \"AWS_EC2_METADATA_SERVICE_ENDPOINT_MODE\";\nexport const CONFIG_ENDPOINT_MODE_NAME = \"ec2_metadata_service_endpoint_mode\";\nexport const ENDPOINT_MODE_CONFIG_OPTIONS = {\n    environmentVariableSelector: (env) => env[ENV_ENDPOINT_MODE_NAME],\n    configFileSelector: (profile) => profile[CONFIG_ENDPOINT_MODE_NAME],\n    default: EndpointMode.IPv4,\n};\n","import { loadConfig } from \"@smithy/node-config-provider\";\nimport { parseUrl } from \"@smithy/url-parser\";\nimport { Endpoint as InstanceMetadataEndpoint } from \"../config/Endpoint\";\nimport { ENDPOINT_CONFIG_OPTIONS } from \"../config/EndpointConfigOptions\";\nimport { EndpointMode } from \"../config/EndpointMode\";\nimport { ENDPOINT_MODE_CONFIG_OPTIONS, } from \"../config/EndpointModeConfigOptions\";\nexport const getInstanceMetadataEndpoint = async () => parseUrl((await getFromEndpointConfig()) || (await getFromEndpointModeConfig()));\nconst getFromEndpointConfig = async () => loadConfig(ENDPOINT_CONFIG_OPTIONS)();\nconst getFromEndpointModeConfig = async () => {\n    const endpointMode = await loadConfig(ENDPOINT_MODE_CONFIG_OPTIONS)();\n    switch (endpointMode) {\n        case EndpointMode.IPv4:\n            return InstanceMetadataEndpoint.IPv4;\n        case EndpointMode.IPv6:\n            return InstanceMetadataEndpoint.IPv6;\n        default:\n            throw new Error(`Unsupported endpoint mode: ${endpointMode}.` + ` Select from ${Object.values(EndpointMode)}`);\n    }\n};\n","const STATIC_STABILITY_REFRESH_INTERVAL_SECONDS = 5 * 60;\nconst STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS = 5 * 60;\nconst STATIC_STABILITY_DOC_URL = \"https://docs.aws.amazon.com/sdkref/latest/guide/feature-static-credentials.html\";\nexport const getExtendedInstanceMetadataCredentials = (credentials, logger) => {\n    const refreshInterval = STATIC_STABILITY_REFRESH_INTERVAL_SECONDS +\n        Math.floor(Math.random() * STATIC_STABILITY_REFRESH_INTERVAL_JITTER_WINDOW_SECONDS);\n    const newExpiration = new Date(Date.now() + refreshInterval * 1000);\n    logger.warn(\"Attempting credential expiration extension due to a credential service availability issue. A refresh of these \" +\n        `credentials will be attempted after ${new Date(newExpiration)}.\\nFor more information, please visit: ` +\n        STATIC_STABILITY_DOC_URL);\n    const originalExpiration = credentials.originalExpiration ?? credentials.expiration;\n    return {\n        ...credentials,\n        ...(originalExpiration ? { originalExpiration } : {}),\n        expiration: newExpiration,\n    };\n};\n","import { loadConfig } from \"@smithy/node-config-provider\";\nimport { CredentialsProviderError } from \"@smithy/property-provider\";\nimport { InstanceMetadataV1FallbackError } from \"./error/InstanceMetadataV1FallbackError\";\nimport { httpRequest } from \"./remoteProvider/httpRequest\";\nimport { fromImdsCredentials, isImdsCredentials } from \"./remoteProvider/ImdsCredentials\";\nimport { providerConfigFromInit } from \"./remoteProvider/RemoteProviderInit\";\nimport { retry } from \"./remoteProvider/retry\";\nimport { getInstanceMetadataEndpoint } from \"./utils/getInstanceMetadataEndpoint\";\nimport { staticStabilityProvider } from \"./utils/staticStabilityProvider\";\nconst IMDS_PATH = \"/latest/meta-data/iam/security-credentials/\";\nconst IMDS_TOKEN_PATH = \"/latest/api/token\";\nconst AWS_EC2_METADATA_V1_DISABLED = \"AWS_EC2_METADATA_V1_DISABLED\";\nconst PROFILE_AWS_EC2_METADATA_V1_DISABLED = \"ec2_metadata_v1_disabled\";\nconst X_AWS_EC2_METADATA_TOKEN = \"x-aws-ec2-metadata-token\";\nexport const fromInstanceMetadata = (init = {}) => staticStabilityProvider(getInstanceMetadataProvider(init), { logger: init.logger });\nconst getInstanceMetadataProvider = (init = {}) => {\n    let disableFetchToken = false;\n    const { logger, profile } = init;\n    const { timeout, maxRetries } = providerConfigFromInit(init);\n    const getCredentials = async (maxRetries, options) => {\n        const isImdsV1Fallback = disableFetchToken || options.headers?.[X_AWS_EC2_METADATA_TOKEN] == null;\n        if (isImdsV1Fallback) {\n            let fallbackBlockedFromProfile = false;\n            let fallbackBlockedFromProcessEnv = false;\n            const configValue = await loadConfig({\n                environmentVariableSelector: (env) => {\n                    const envValue = env[AWS_EC2_METADATA_V1_DISABLED];\n                    fallbackBlockedFromProcessEnv = !!envValue && envValue !== \"false\";\n                    if (envValue === undefined) {\n                        throw new CredentialsProviderError(`${AWS_EC2_METADATA_V1_DISABLED} not set in env, checking config file next.`, { logger: init.logger });\n                    }\n                    return fallbackBlockedFromProcessEnv;\n                },\n                configFileSelector: (profile) => {\n                    const profileValue = profile[PROFILE_AWS_EC2_METADATA_V1_DISABLED];\n                    fallbackBlockedFromProfile = !!profileValue && profileValue !== \"false\";\n                    return fallbackBlockedFromProfile;\n                },\n                default: false,\n            }, {\n                profile,\n            })();\n            if (init.ec2MetadataV1Disabled || configValue) {\n                const causes = [];\n                if (init.ec2MetadataV1Disabled)\n                    causes.push(\"credential provider initialization (runtime option ec2MetadataV1Disabled)\");\n                if (fallbackBlockedFromProfile)\n                    causes.push(`config file profile (${PROFILE_AWS_EC2_METADATA_V1_DISABLED})`);\n                if (fallbackBlockedFromProcessEnv)\n                    causes.push(`process environment variable (${AWS_EC2_METADATA_V1_DISABLED})`);\n                throw new InstanceMetadataV1FallbackError(`AWS EC2 Metadata v1 fallback has been blocked by AWS SDK configuration in the following: [${causes.join(\", \")}].`);\n            }\n        }\n        const imdsProfile = (await retry(async () => {\n            let profile;\n            try {\n                profile = await getProfile(options);\n            }\n            catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return profile;\n        }, maxRetries)).trim();\n        return retry(async () => {\n            let creds;\n            try {\n                creds = await getCredentialsFromProfile(imdsProfile, options, init);\n            }\n            catch (err) {\n                if (err.statusCode === 401) {\n                    disableFetchToken = false;\n                }\n                throw err;\n            }\n            return creds;\n        }, maxRetries);\n    };\n    return async () => {\n        const endpoint = await getInstanceMetadataEndpoint();\n        if (disableFetchToken) {\n            logger?.debug(\"AWS SDK Instance Metadata\", \"using v1 fallback (no token fetch)\");\n            return getCredentials(maxRetries, { ...endpoint, timeout });\n        }\n        else {\n            let token;\n            try {\n                token = (await getMetadataToken({ ...endpoint, timeout })).toString();\n            }\n            catch (error) {\n                if (error?.statusCode === 400) {\n                    throw Object.assign(error, {\n                        message: \"EC2 Metadata token request returned error\",\n                    });\n                }\n                else if (error.message === \"TimeoutError\" || [403, 404, 405].includes(error.statusCode)) {\n                    disableFetchToken = true;\n                }\n                logger?.debug(\"AWS SDK Instance Metadata\", \"using v1 fallback (initial)\");\n                return getCredentials(maxRetries, { ...endpoint, timeout });\n            }\n            return getCredentials(maxRetries, {\n                ...endpoint,\n                headers: {\n                    [X_AWS_EC2_METADATA_TOKEN]: token,\n                },\n                timeout,\n            });\n        }\n    };\n};\nconst getMetadataToken = async (options) => httpRequest({\n    ...options,\n    path: IMDS_TOKEN_PATH,\n    method: \"PUT\",\n    headers: {\n        \"x-aws-ec2-metadata-token-ttl-seconds\": \"21600\",\n    },\n});\nconst getProfile = async (options) => (await httpRequest({ ...options, path: IMDS_PATH })).toString();\nconst getCredentialsFromProfile = async (profile, options, init) => {\n    const credentialsResponse = JSON.parse((await httpRequest({\n        ...options,\n        path: IMDS_PATH + profile,\n    })).toString());\n    if (!isImdsCredentials(credentialsResponse)) {\n        throw new CredentialsProviderError(\"Invalid response received from instance metadata service.\", {\n            logger: init.logger,\n        });\n    }\n    return fromImdsCredentials(credentialsResponse);\n};\n","import { getExtendedInstanceMetadataCredentials } from \"./getExtendedInstanceMetadataCredentials\";\nexport const staticStabilityProvider = (provider, options = {}) => {\n    const logger = options?.logger || console;\n    let pastCredentials;\n    return async () => {\n        let credentials;\n        try {\n            credentials = await provider();\n            if (credentials.expiration && credentials.expiration.getTime() < Date.now()) {\n                credentials = getExtendedInstanceMetadataCredentials(credentials, logger);\n            }\n        }\n        catch (e) {\n            if (pastCredentials) {\n                logger.warn(\"Credential renew failed: \", e);\n                credentials = getExtendedInstanceMetadataCredentials(pastCredentials, logger);\n            }\n            else {\n                throw e;\n            }\n        }\n        pastCredentials = credentials;\n        return credentials;\n    };\n};\n"],"names":["httpRequest","options","Promise","resolve","reject","req","request","method","hostname","replace","on","err","Object","assign","ProviderError","destroy","res","statusCode","chunks","chunk","push","Buffer","concat","end","isImdsCredentials","arg","Boolean","AccessKeyId","SecretAccessKey","Token","Expiration","fromImdsCredentials","creds","accessKeyId","secretAccessKey","sessionToken","expiration","Date","AccountId","accountId","DEFAULT_TIMEOUT","DEFAULT_MAX_RETRIES","providerConfigFromInit","maxRetries","timeout","retry","toRetry","promise","i","catch","ENV_CMDS_FULL_URI","ENV_CMDS_RELATIVE_URI","ENV_CMDS_AUTH_TOKEN","fromContainerMetadata","init","async","requestOptions","getCmdsUri","logger","credsResponse","JSON","parse","requestFromEcsImds","CredentialsProviderError","process","env","headers","Authorization","toString","GREENGRASS_HOSTS","localhost","GREENGRASS_PROTOCOLS","path","parsed","tryNextLink","protocol","port","parseInt","undefined","InstanceMetadataV1FallbackError","constructor","message","super","this","name","setPrototypeOf","prototype","Endpoint","ENDPOINT_CONFIG_OPTIONS","environmentVariableSelector","configFileSelector","profile","default","EndpointMode","ENDPOINT_MODE_CONFIG_OPTIONS","IPv4","getInstanceMetadataEndpoint","parseUrl","getFromEndpointConfig","getFromEndpointModeConfig","loadConfig","endpointMode","InstanceMetadataEndpoint","IPv6","Error","values","getExtendedInstanceMetadataCredentials","credentials","refreshInterval","Math","floor","random","newExpiration","now","warn","originalExpiration","IMDS_PATH","AWS_EC2_METADATA_V1_DISABLED","PROFILE_AWS_EC2_METADATA_V1_DISABLED","X_AWS_EC2_METADATA_TOKEN","fromInstanceMetadata","provider","console","pastCredentials","getTime","e","staticStabilityProvider","getInstanceMetadataProvider","disableFetchToken","getCredentials","fallbackBlockedFromProfile","fallbackBlockedFromProcessEnv","configValue","envValue","profileValue","ec2MetadataV1Disabled","causes","join","imdsProfile","getProfile","trim","getCredentialsFromProfile","endpoint","debug","token","getMetadataToken","error","includes","credentialsResponse"],"mappings":"gUAGO,SAASA,EAAYC,GACxB,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzB,MAAMC,EAAMC,EAAQ,CAChBC,OAAQ,SACLN,EACHO,SAAUP,EAAQO,UAAUC,QAAQ,aAAc,QAEtDJ,EAAIK,GAAG,SAAUC,IACbP,EAAOQ,OAAOC,OAAO,IAAIC,EAAc,kDAAmDH,IAC1FN,EAAIU,SAAS,IAEjBV,EAAIK,GAAG,WAAW,KACdN,EAAO,IAAIU,EAAc,gDACzBT,EAAIU,SAAS,IAEjBV,EAAIK,GAAG,YAAaM,IAChB,MAAMC,WAAEA,EAAa,KAAQD,GACzBC,EAAa,KAAO,KAAOA,KAC3Bb,EAAOQ,OAAOC,OAAO,IAAIC,EAAc,0DAA2D,CAAEG,gBACpGZ,EAAIU,WAER,MAAMG,EAAS,GACfF,EAAIN,GAAG,QAASS,IACZD,EAAOE,KAAKD,EAAM,IAEtBH,EAAIN,GAAG,OAAO,KACVP,EAAQkB,EAAOC,OAAOJ,IACtBb,EAAIU,SAAS,GACf,IAENV,EAAIkB,KAAK,GAEjB,CCnCO,MAAMC,EAAqBC,GAAQC,QAAQD,IAC/B,iBAARA,GACoB,iBAApBA,EAAIE,aACoB,iBAAxBF,EAAIG,iBACU,iBAAdH,EAAII,OACe,iBAAnBJ,EAAIK,WACFC,EAAuBC,IAAW,CAC3CC,YAAaD,EAAML,YACnBO,gBAAiBF,EAAMJ,gBACvBO,aAAcH,EAAMH,MACpBO,WAAY,IAAIC,KAAKL,EAAMF,eACvBE,EAAMM,WAAa,CAAEC,UAAWP,EAAMM,aCXjCE,EAAkB,IAClBC,EAAsB,EACtBC,EAAyB,EAAGC,aADN,EACwCC,UAF5C,QAEwE,CAAQD,aAAYC,YCF9GC,EAAQ,CAACC,EAASH,KAC3B,IAAII,EAAUD,IACd,IAAK,IAAIE,EAAI,EAAGA,EAAIL,EAAYK,IAC5BD,EAAUA,EAAQE,MAAMH,GAE5B,OAAOC,CAAO,ECCLG,EAAoB,qCACpBC,EAAwB,yCACxBC,EAAsB,oCACtBC,EAAwB,CAACC,EAAO,MACzC,MAAMV,QAAEA,EAAOD,WAAEA,GAAeD,EAAuBY,GACvD,MAAO,IAAMT,GAAMU,UACf,MAAMC,QAAuBC,EAAW,CAAEC,OAAQJ,EAAKI,SACjDC,EAAgBC,KAAKC,YAAYC,EAAmBlB,EAASY,IACnE,IAAKhC,EAAkBmC,GACnB,MAAM,IAAII,EAAyB,4DAA6D,CAC5FL,OAAQJ,EAAKI,SAGrB,OAAO3B,EAAoB4B,EAAc,GAC1ChB,EAAW,EAEZmB,EAAqBP,MAAOX,EAAS3C,KACnC+D,QAAQC,IAAIb,KACZnD,EAAQiE,QAAU,IACXjE,EAAQiE,QACXC,cAAeH,QAAQC,IAAIb,KAOnC,aAJqBpD,EAAY,IAC1BC,EACH2C,aAEUwB,UAAU,EAGtBC,EAAmB,CACrBC,WAAW,EACX,aAAa,GAEXC,EAAuB,CACzB,SAAS,EACT,UAAU,GAERd,EAAaF,OAASG,aACxB,GAAIM,QAAQC,IAAId,GACZ,MAAO,CACH3C,SAZI,gBAaJgE,KAAMR,QAAQC,IAAId,IAG1B,GAAIa,QAAQC,IAAIf,GAAoB,CAChC,MAAMuB,EAASZ,EAAMG,QAAQC,IAAIf,IACjC,IAAKuB,EAAOjE,YAAciE,EAAOjE,YAAY6D,GACzC,MAAM,IAAIN,EAAyB,GAAGU,EAAOjE,8DAA+D,CACxGkE,aAAa,EACbhB,WAGR,IAAKe,EAAOE,YAAcF,EAAOE,YAAYJ,GACzC,MAAM,IAAIR,EAAyB,GAAGU,EAAOE,8DAA+D,CACxGD,aAAa,EACbhB,WAGR,MAAO,IACAe,EACHG,KAAMH,EAAOG,KAAOC,SAASJ,EAAOG,KAAM,SAAME,EAEvD,CACD,MAAM,IAAIf,EACN,wEAAQZ,QAA4BD,gCAChB,CACpBwB,aAAa,EACbhB,UACF,EC1EC,MAAMqB,UAAwChB,EACjD,WAAAiB,CAAYC,EAASP,GAAc,GAC/BQ,MAAMD,EAASP,GACfS,KAAKT,YAAcA,EACnBS,KAAKC,KAAO,kCACZxE,OAAOyE,eAAeF,KAAMJ,EAAgCO,UAC/D,ECPK,IAACC,GACX,SAAWA,GACPA,EAAe,KAAI,yBACnBA,EAAe,KAAI,wBACtB,CAHD,CAGGA,IAAaA,EAAW,CAAA,ICJpB,MAEMC,EAA0B,CACnCC,4BAA8BxB,GAAQA,EAAqB,kCAC3DyB,mBAAqBC,GAAYA,EAA4B,8BAC7DC,aAASd,GCLN,IAAIe,GACX,SAAWA,GACPA,EAAmB,KAAI,OACvBA,EAAmB,KAAI,MAC1B,CAHD,CAGGA,IAAiBA,EAAe,CAAA,ICH5B,MAEMC,EAA+B,CACxCL,4BAA8BxB,GAAQA,EAA0B,uCAChEyB,mBAAqBC,GAAYA,EAAiC,mCAClEC,QAASC,EAAaE,MCAbC,EAA8BzC,SAAY0C,QAAgBC,WAAmCC,KACpGD,EAAwB3C,SAAY6C,EAAWZ,EAAXY,GACpCD,EAA4B5C,UAC9B,MAAM8C,QAAqBD,EAAWN,EAAXM,GAC3B,OAAQC,GACJ,KAAKR,EAAaE,KACd,OAAOO,EAAyBP,KACpC,KAAKF,EAAaU,KACd,OAAOD,EAAyBC,KACpC,QACI,MAAM,IAAIC,MAAM,8BAA8BH,kBAAkCzF,OAAO6F,OAAOZ,MACrG,ECdQa,EAAyC,CAACC,EAAajD,KAChE,MAAMkD,EAJwC,IAK1CC,KAAKC,MAJmD,IAI7CD,KAAKE,UACdC,EAAgB,IAAI3E,KAAKA,KAAK4E,MAA0B,IAAlBL,GAC5ClD,EAAOwD,KACH,qJAAuC,IAAI7E,KAAK2E,4HAEpD,MAAMG,EAAqBR,EAAYQ,oBAAsBR,EAAYvE,WACzE,MAAO,IACAuE,KACCQ,EAAqB,CAAEA,sBAAuB,GAClD/E,WAAY4E,EACf,ECNCI,EAAY,8CAEZC,EAA+B,+BAC/BC,EAAuC,2BACvCC,EAA2B,2BACpBC,EAAuB,CAAClE,EAAO,CAAE,ICbP,EAACmE,EAAUxH,EAAU,MACxD,MAAMyD,EAASzD,GAASyD,QAAUgE,QAClC,IAAIC,EACJ,OAAOpE,UACH,IAAIoD,EACJ,IACIA,QAAoBc,IAChBd,EAAYvE,YAAcuE,EAAYvE,WAAWwF,UAAYvF,KAAK4E,QAClEN,EAAcD,EAAuCC,EAAajD,GAEzE,CACD,MAAOmE,GACH,IAAIF,EAKA,MAAME,EAJNnE,EAAOwD,KAAK,4BAA6BW,GACzClB,EAAcD,EAAuCiB,EAAiBjE,EAK7E,CAED,OADAiE,EAAkBhB,EACXA,CAAW,CACrB,EDT8CmB,CAAwBC,EAA4BzE,GAAO,CAAEI,OAAQJ,EAAKI,SACvHqE,EAA8B,CAACzE,EAAO,MACxC,IAAI0E,GAAoB,EACxB,MAAMtE,OAAEA,EAAMiC,QAAEA,GAAYrC,GACtBV,QAAEA,EAAOD,WAAEA,GAAeD,EAAuBY,GACjD2E,EAAiB1E,MAAOZ,EAAY1C,KAEtC,GADyB+H,GAAoE,MAA/C/H,EAAQiE,UAAUqD,GAC1C,CAClB,IAAIW,GAA6B,EAC7BC,GAAgC,EACpC,MAAMC,QAAoBhC,EAAW,CACjCX,4BAA8BxB,IAC1B,MAAMoE,EAAWpE,EAAIoD,GAErB,GADAc,IAAkCE,GAAyB,UAAbA,OAC7BvD,IAAbuD,EACA,MAAM,IAAItE,EAAyB,GAAGsD,+CAA2E,CAAE3D,OAAQJ,EAAKI,SAEpI,OAAOyE,CAA6B,EAExCzC,mBAAqBC,IACjB,MAAM2C,EAAe3C,EAAQ2B,GAE7B,OADAY,IAA+BI,GAAiC,UAAjBA,EACxCJ,CAA0B,EAErCtC,SAAS,GACV,CACCD,WAhBsBS,GAkB1B,GAAI9C,EAAKiF,uBAAyBH,EAAa,CAC3C,MAAMI,EAAS,GAOf,MANIlF,EAAKiF,uBACLC,EAAOpH,KAAK,6EACZ8G,GACAM,EAAOpH,KAAK,wBAAwBkG,MACpCa,GACAK,EAAOpH,KAAK,iCAAiCiG,MAC3C,IAAItC,EAAgC,6FAA6FyD,EAAOC,KAAK,UACtJ,CACJ,CACD,MAAMC,SAAqB7F,GAAMU,UAC7B,IAAIoC,EACJ,IACIA,QAAgBgD,EAAW1I,EAC9B,CACD,MAAOU,GAIH,MAHuB,MAAnBA,EAAIM,aACJ+G,GAAoB,GAElBrH,CACT,CACD,OAAOgF,CAAO,GACfhD,IAAaiG,OAChB,OAAO/F,GAAMU,UACT,IAAIvB,EACJ,IACIA,QAAc6G,EAA0BH,EAAazI,EAASqD,EACjE,CACD,MAAO3C,GAIH,MAHuB,MAAnBA,EAAIM,aACJ+G,GAAoB,GAElBrH,CACT,CACD,OAAOqB,CAAK,GACbW,EAAW,EAElB,OAAOY,UACH,MAAMuF,QAAiB9C,IACvB,GAAIgC,EAEA,OADAtE,GAAQqF,MAAM,4BAA6B,sCACpCd,EAAetF,EAAY,IAAKmG,EAAUlG,YAEhD,CACD,IAAIoG,EACJ,IACIA,SAAeC,EAAiB,IAAKH,EAAUlG,aAAYwB,UAC9D,CACD,MAAO8E,GACH,GAA0B,MAAtBA,GAAOjI,WACP,MAAML,OAAOC,OAAOqI,EAAO,CACvBjE,QAAS,8CAOjB,OAJ2B,iBAAlBiE,EAAMjE,SAA8B,CAAC,IAAK,IAAK,KAAKkE,SAASD,EAAMjI,eACxE+G,GAAoB,GAExBtE,GAAQqF,MAAM,4BAA6B,+BACpCd,EAAetF,EAAY,IAAKmG,EAAUlG,WACpD,CACD,OAAOqF,EAAetF,EAAY,IAC3BmG,EACH5E,QAAS,CACLqD,CAACA,GAA2ByB,GAEhCpG,WAEP,EACJ,EAECqG,EAAmB1F,MAAOtD,GAAYD,EAAY,IACjDC,EACHuE,KAzGoB,oBA0GpBjE,OAAQ,MACR2D,QAAS,CACL,uCAAwC,WAG1CyE,EAAapF,MAAOtD,UAAmBD,EAAY,IAAKC,EAASuE,KAAM4C,KAAchD,WACrFyE,EAA4BtF,MAAOoC,EAAS1F,EAASqD,KACvD,MAAM8F,EAAsBxF,KAAKC,aAAa7D,EAAY,IACnDC,EACHuE,KAAM4C,EAAYzB,KAClBvB,YACJ,IAAK5C,EAAkB4H,GACnB,MAAM,IAAIrF,EAAyB,4DAA6D,CAC5FL,OAAQJ,EAAKI,SAGrB,OAAO3B,EAAoBqH,EAAoB"}