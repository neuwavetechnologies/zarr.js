import{CredentialsProviderError as e,HttpRequest as t,sdkStreamMixin as r,parseRfc3339DateTime as o,NodeHttpHandler as n,setCredentialFeature as s}from"./core.min.mjs";import"http2";import"stream";import i from"fs/promises";import"buffer";import"http";import"https";import"zlib";import"fs";import"crypto";import"path";import"os";import"process";const a=(a={})=>{let c;a.logger?.debug("@aws-sdk/credential-provider-http - fromHttp");const p=a.awsContainerCredentialsRelativeUri??process.env.AWS_CONTAINER_CREDENTIALS_RELATIVE_URI,h=a.awsContainerCredentialsFullUri??process.env.AWS_CONTAINER_CREDENTIALS_FULL_URI,l=a.awsContainerAuthorizationToken??process.env.AWS_CONTAINER_AUTHORIZATION_TOKEN,d=a.awsContainerAuthorizationTokenFile??process.env.AWS_CONTAINER_AUTHORIZATION_TOKEN_FILE,m="NoOpLogger"!==a.logger?.constructor?.name&&a.logger?a.logger.warn:console.warn;if(p&&h&&(m("@aws-sdk/credential-provider-http: you have set both awsContainerCredentialsRelativeUri and awsContainerCredentialsFullUri."),m("awsContainerCredentialsFullUri will take precedence.")),l&&d&&(m("@aws-sdk/credential-provider-http: you have set both awsContainerAuthorizationToken and awsContainerAuthorizationTokenFile."),m("awsContainerAuthorizationToken will take precedence.")),h)c=h;else{if(!p)throw new e("No HTTP credential provider host provided.\nSet AWS_CONTAINER_CREDENTIALS_FULL_URI or AWS_CONTAINER_CREDENTIALS_RELATIVE_URI.",{logger:a.logger});c=`http://169.254.170.2${p}`}const g=new URL(c);((t,r)=>{if("https:"!==t.protocol&&"169.254.170.2"!==t.hostname&&"169.254.170.23"!==t.hostname&&"[fd00:ec2::23]"!==t.hostname){if(t.hostname.includes("[")){if("[::1]"===t.hostname||"[0000:0000:0000:0000:0000:0000:0000:0001]"===t.hostname)return}else{if("localhost"===t.hostname)return;const e=t.hostname.split("."),r=e=>{const t=parseInt(e,10);return 0<=t&&t<=255};if("127"===e[0]&&r(e[1])&&r(e[2])&&r(e[3])&&4===e.length)return}throw new e("URL not accepted. It must either be HTTPS or match one of the following:\n  - loopback CIDR 127.0.0.0/8 or [::1/128]\n  - ECS container host 169.254.170.2\n  - EKS container host 169.254.170.23 or [fd00:ec2::23]",{logger:r})}})(g,a.logger);const u=new n({requestTimeout:a.timeout??1e3,connectionTimeout:a.timeout??1e3});return w=async()=>{const n=function(e){return new t({protocol:e.protocol,hostname:e.hostname,port:Number(e.port),path:e.pathname,query:Array.from(e.searchParams.entries()).reduce(((e,[t,r])=>(e[t]=r,e)),{}),fragment:e.hash})}(g);l?n.headers.Authorization=l:d&&(n.headers.Authorization=(await i.readFile(d)).toString());try{return async function(t,n){const s=r(t.body),i=await s.transformToString();if(200===t.statusCode){const t=JSON.parse(i);if("string"!=typeof t.AccessKeyId||"string"!=typeof t.SecretAccessKey||"string"!=typeof t.Token||"string"!=typeof t.Expiration)throw new e("HTTP credential provider response not of the required format, an object matching: { AccessKeyId: string, SecretAccessKey: string, Token: string, Expiration: string(rfc3339) }",{logger:n});return{accessKeyId:t.AccessKeyId,secretAccessKey:t.SecretAccessKey,sessionToken:t.Token,expiration:o(t.Expiration)}}if(t.statusCode>=400&&t.statusCode<500){let r={};try{r=JSON.parse(i)}catch(e){}throw Object.assign(new e(`Server responded with status: ${t.statusCode}`,{logger:n}),{Code:r.Code,Message:r.Message})}throw new e(`Server responded with status: ${t.statusCode}`,{logger:n})}((await u.handle(n)).response).then((e=>s(e,"CREDENTIALS_HTTP","z")))}catch(t){throw new e(String(t),{logger:a.logger})}},T=a.maxRetries??3,A=a.timeout??1e3,async()=>{for(let e=0;e<T;++e)try{return await w()}catch(e){await new Promise((e=>setTimeout(e,A)))}return await w()};var w,T,A};export{a as fromHttp};
//# sourceMappingURL=index.min6.mjs.map
